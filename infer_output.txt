here we are!
*************** Infering method new_from_params from class [s]User ***************
HERE 2
HERE 2a
1. About to add upper bound { [s]User#new_from_params arg: params } <= [ []: (:name) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ]
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { { [s]User#new_from_params arg: params }#[] ret: ret } <= String
HERE 2
HERE 2a
1. About to add upper bound { [s]User#new_from_params arg: params } <= [ []: (:email) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ]
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { { [s]User#new_from_params arg: params }#[] ret: ret } <= String
HERE 2
HERE 2a
1. About to add upper bound { [s]User#new_from_params arg: params } <= [ []: (:password) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ]
HERE 1
HERE 1
HERE 1a
1. About to add upper bound { { [s]User#new_from_params arg: params }#[] ret: ret } <= { User#password= arg: password }
false AND false
2. About to add lower bound { { [s]User#new_from_params arg: params }#[] ret: ret } <= { User#password= arg: password }
HERE 2
HERE 2a
1. About to add upper bound { [s]User#new_from_params arg: params } <= [ []: (:username) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ]
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { { [s]User#new_from_params arg: params }#[] ret: ret } <= String
2. About to add lower bound User <= { [s]User#new_from_params ret: ret }
Done with constraint generation.
*************** Infering method find_by_username from class [s]User ***************
HERE 1
HERE 1
HERE 1a
1. About to add upper bound { [s]User#find_by_username arg: username } <= { [s]User#normalize_username arg: username }
false AND false
2. About to add lower bound { [s]User#find_by_username arg: username } <= { [s]User#normalize_username arg: username }
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { [s]User#normalize_username ret: ret } <= (Symbol or String)
2. About to add lower bound User <= { [s]User#find_by_username ret: ret }
Done with constraint generation.
*************** Infering method username_available? from class [s]User ***************
2. About to add lower bound nil <= { [s]User#username_available? arg: email }
2. About to add lower bound false <= { [s]User#username_available? arg: allow_reserved_username }
HERE 1
HERE 1
HERE 1a
1. About to add upper bound { [s]User#username_available? arg: username } <= { [s]User#normalize_username arg: username }
false AND false
2. About to add lower bound { [s]User#username_available? arg: username } <= { [s]User#normalize_username arg: username }
HERE 2
HERE 2a
1. About to add upper bound { [s]User#username_available? arg: allow_reserved_username } <= [ !: () -> { { [s]User#username_available? arg: allow_reserved_username }#! ret: ret } ]
HERE 1
HERE 1
HERE 1a
1. About to add upper bound { [s]User#normalize_username ret: ret } <= { [s]User#reserved_username? arg: username }
false AND false
2. About to add lower bound { [s]User#normalize_username ret: ret } <= { [s]User#reserved_username? arg: username }
2. About to add lower bound false <= { [s]User#username_available? ret: ret }
HERE 1
HERE 1
HERE 1a
1. About to add upper bound { [s]User#normalize_username ret: ret } <= { [s]User#username_exists? arg: username }
false AND false
2. About to add lower bound { [s]User#normalize_username ret: ret } <= { [s]User#username_exists? arg: username }
HERE 2
HERE 2a
1. About to add upper bound { [s]User#username_exists? ret: ret } <= [ !: () -> { { [s]User#username_exists? ret: ret }#! ret: ret } ]
2. About to add lower bound true <= { [s]User#username_available? ret: ret }
HERE 2
HERE 2a
1. About to add upper bound { [s]User#username_available? arg: email } <= [ present?: () -> { { [s]User#username_available? arg: email }#present? ret: ret } ]
Done with constraint generation.
*************** Infering method featured_user_badges from class User ***************
2. About to add lower bound 3 <= { User#featured_user_badges arg: limit }
HERE 2
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { User#featured_user_badges arg: limit } <= Integer
HERE 2
HERE 2
HERE 2
HERE 2a
2. About to add lower bound Array<(Topic or User or Post or UserBadge or Badge or BadgeType or GrantedBy)> <= { User#featured_user_badges ret: ret }
Done with constraint generation.
*************** Infering method email_confirmed? from class User ***************
2. About to add lower bound false <= { User#email_confirmed? ret: ret }
2. About to add lower bound true <= { User#email_confirmed? ret: ret }
Done with constraint generation.
*************** Infering method activate from class User ***************
2. About to add lower bound String <= { [s]EmailToken#confirm arg: token }
2. About to add lower bound true <= { [s]EmailToken#confirm arg: skip_reviewable }
HERE 1
HERE 1a
1. About to add upper bound { User#create_reviewable ret: ret } <= { User#activate ret: ret }
false AND false
2. About to add lower bound { User#create_reviewable ret: ret } <= { User#activate ret: ret }
Done with constraint generation.
*************** Infering method number_of_deleted_posts from class User ***************
2. About to add lower bound Integer <= { User#number_of_deleted_posts ret: ret }
Done with constraint generation.
*************** Infering method number_of_flags_given from class User ***************
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { [s]PostActionType#notify_flag_type_ids ret: ret } <= (Integer or Array<Integer>)
2. About to add lower bound Integer <= { User#number_of_flags_given ret: ret }
Done with constraint generation.
*************** Infering method create_user_profile from class User ***************
2. About to add lower bound UserProfile <= { User#create_user_profile ret: ret }
Done with constraint generation.
*************** Infering method create_user_option from class User ***************
2. About to add lower bound UserOption <= { User#create_user_option ret: ret }
Done with constraint generation.
*************** Infering method create_email_token from class User ***************
2. About to add lower bound EmailToken <= { User#create_email_token ret: ret }
Done with constraint generation.
*************** Infering method update_usernames from class User ***************
2. About to add lower bound String <= { User#update_usernames ret: ret }
Done with constraint generation.
*************** Infering method seen_before? from class User ***************
2. About to add lower bound false <= { User#seen_before? ret: ret }
2. About to add lower bound true <= { User#seen_before? ret: ret }
Done with constraint generation.
*************** Infering method active from class [s]EmailToken ***************
2. About to add lower bound ActiveRecord_Relation<EmailToken> <= { [s]EmailToken#active ret: ret }
Done with constraint generation.
*************** Infering method seen? from class Post ***************
HERE 2
HERE 2a
1. About to add upper bound { Post#seen? arg: user } <= [ id: () -> { { Post#seen? arg: user }#id ret: ret } ]
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { { Post#seen? arg: user }#id ret: ret } <= (Integer or Array<Integer>)
2. About to add lower bound false <= { Post#seen? ret: ret }
2. About to add lower bound true <= { Post#seen? ret: ret }
Done with constraint generation.
*************** Infering method find_by_detail from class [s]Post ***************
HERE 2
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { [s]Post#find_by_detail arg: key } <= (Symbol or String)
HERE 2
HERE 2a
1. About to add upper bound { [s]Post#find_by_detail arg: value } <= (Symbol or String)
2. About to add lower bound Post <= { [s]Post#find_by_detail ret: ret }
Done with constraint generation.
*************** Infering method is_flagged? from class Post ***************
HERE 2
HERE 2a
1. About to add upper bound { [s]PostActionType#flag_types_without_custom ret: ret } <= [ values: () -> { { [s]PostActionType#flag_types_without_custom ret: ret }#values ret: ret } ]
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { { [s]PostActionType#flag_types_without_custom ret: ret }#values ret: ret } <= (Integer or Array<Integer>)
2. About to add lower bound false <= { Post#is_flagged? ret: ret }
2. About to add lower bound true <= { Post#is_flagged? ret: ret }
Done with constraint generation.
*************** Infering method is_reply_by_email? from class Post ***************
2. About to add lower bound false <= { Post#is_reply_by_email? ret: ret }
2. About to add lower bound true <= { Post#is_reply_by_email? ret: ret }
Done with constraint generation.
*************** Infering method add_detail from class Post ***************
2. About to add lower bound nil <= { Post#add_detail arg: extra }
HERE 2
HERE 2
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { Post#add_detail arg: key } <= (Symbol or String)
HERE 2
HERE 2a
1. About to add upper bound { Post#add_detail arg: value } <= (Symbol or String)
HERE 2
HERE 2a
1. About to add upper bound { Post#add_detail arg: extra } <= (Symbol or String)
2. About to add lower bound PostDetail <= { Post#add_detail ret: ret }
Done with constraint generation.
*************** Infering method limit_posts_per_day from class Post ***************
2. About to add lower bound User <= { RateLimiter#initialize arg: user }
2. About to add lower bound 'first-day-replies-per-day' <= { RateLimiter#initialize arg: type }
2. About to add lower bound Integer <= { RateLimiter#initialize arg: max }
2. About to add lower bound Integer <= { RateLimiter#initialize arg: secs }
2. About to add lower bound RateLimiter <= { Post#limit_posts_per_day ret: ret }
Done with constraint generation.
*************** Infering method private_message from class [s]Archetype ***************
2. About to add lower bound 'private_message' <= { [s]Archetype#private_message ret: ret }
Done with constraint generation.
*************** Infering method posts_for from class Group ***************
2. About to add lower bound nil <= { Group#posts_for arg: opts }
2. About to add lower bound ({  } or { Group#posts_for arg: opts }) <= { Group#posts_for arg: opts }
HERE 2
HERE 2a
1. About to add upper bound { [s]Post#types ret: ret } <= [ []: (:regular) -> { { [s]Post#types ret: ret }#[] ret: ret } ]
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { { [s]Post#types ret: ret }#[] ret: ret } <= (Integer or Array<Integer>)
HERE 2
HERE 2a
1. About to add upper bound { Group#posts_for arg: opts } <= [ []: (:category_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { Group#posts_for arg: opts }#[] ret: ret } <= [ present?: () -> { { { Group#posts_for arg: opts }#[] ret: ret }#present? ret: ret } ]
HERE 2
HERE 2a
HERE 2
HERE 2a
1. About to add upper bound { { Group#posts_for arg: opts }#[] ret: ret } <= [ to_i: () -> { { { Group#posts_for arg: opts }#[] ret: ret }#to_i ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { Group#posts_for arg: guardian } <= [ filter_allowed_categories: (ActiveRecord_Relation<JoinTable<Post, (Topic or User or Category or Group)>>) -> { { Group#posts_for arg: guardian }#filter_allowed_categories ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { Group#posts_for arg: opts } <= [ []: (:before_post_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ]
HERE 2
HERE 2a
HERE 2
HERE 2a
1. About to add upper bound { { Group#posts_for arg: opts }#[] ret: ret } <= [ to_i: () -> { { { Group#posts_for arg: opts }#[] ret: ret }#to_i ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { Group#posts_for arg: guardian }#filter_allowed_categories ret: ret } <= [ where: ('posts.id < ?', { { { Group#posts_for arg: opts }#[] ret: ret }#to_i ret: ret }) -> { { { Group#posts_for arg: guardian }#filter_allowed_categories ret: ret }#where ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { Group#posts_for arg: guardian }#filter_allowed_categories ret: ret } <= [ order: ('posts.created_at desc') -> { { { Group#posts_for arg: guardian }#filter_allowed_categories ret: ret }#order ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { { Group#posts_for arg: guardian }#filter_allowed_categories ret: ret }#where ret: ret } <= [ order: ('posts.created_at desc') -> { { { { Group#posts_for arg: guardian }#filter_allowed_categories ret: ret }#where ret: ret }#order ret: ret } ]
HERE 1
HERE 1a
1. About to add upper bound { { { { Group#posts_for arg: guardian }#filter_allowed_categories ret: ret }#where ret: ret }#order ret: ret } <= { Group#posts_for ret: ret }
false AND false
2. About to add lower bound { { { { Group#posts_for arg: guardian }#filter_allowed_categories ret: ret }#where ret: ret }#order ret: ret } <= { Group#posts_for ret: ret }
HERE 1
HERE 1a
1. About to add upper bound { { { Group#posts_for arg: guardian }#filter_allowed_categories ret: ret }#order ret: ret } <= { Group#posts_for ret: ret }
false AND false
2. About to add lower bound { { { Group#posts_for arg: guardian }#filter_allowed_categories ret: ret }#order ret: ret } <= { Group#posts_for ret: ret }
Done with constraint generation.
*************** Infering method messages_for from class Group ***************
2. About to add lower bound nil <= { Group#messages_for arg: opts }
2. About to add lower bound ({  } or { Group#messages_for arg: opts }) <= { Group#messages_for arg: opts }
HERE 2
HERE 2a
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { { [s]Post#types ret: ret }#[] ret: ret } <= (Integer or Array<Integer>)
HERE 2
HERE 2a
1. About to add upper bound { Group#messages_for arg: opts } <= [ []: (:category_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { Group#messages_for arg: opts }#[] ret: ret } <= [ present?: () -> { { { Group#messages_for arg: opts }#[] ret: ret }#present? ret: ret } ]
HERE 2
HERE 2a
HERE 2
HERE 2a
1. About to add upper bound { { Group#messages_for arg: opts }#[] ret: ret } <= [ to_i: () -> { { { Group#messages_for arg: opts }#[] ret: ret }#to_i ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { Group#messages_for arg: guardian } <= [ filter_allowed_categories: (ActiveRecord_Relation<JoinTable<Post, (Topic or User or Category)>>) -> { { Group#messages_for arg: guardian }#filter_allowed_categories ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { Group#messages_for arg: opts } <= [ []: (:before_post_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ]
HERE 2
HERE 2a
HERE 2
HERE 2a
1. About to add upper bound { { Group#messages_for arg: opts }#[] ret: ret } <= [ to_i: () -> { { { Group#messages_for arg: opts }#[] ret: ret }#to_i ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { Group#messages_for arg: guardian }#filter_allowed_categories ret: ret } <= [ where: ('posts.id < ?', { { { Group#messages_for arg: opts }#[] ret: ret }#to_i ret: ret }) -> { { { Group#messages_for arg: guardian }#filter_allowed_categories ret: ret }#where ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { Group#messages_for arg: guardian }#filter_allowed_categories ret: ret } <= [ order: ('posts.created_at desc') -> { { { Group#messages_for arg: guardian }#filter_allowed_categories ret: ret }#order ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { { Group#messages_for arg: guardian }#filter_allowed_categories ret: ret }#where ret: ret } <= [ order: ('posts.created_at desc') -> { { { { Group#messages_for arg: guardian }#filter_allowed_categories ret: ret }#where ret: ret }#order ret: ret } ]
HERE 1
HERE 1a
1. About to add upper bound { { { { Group#messages_for arg: guardian }#filter_allowed_categories ret: ret }#where ret: ret }#order ret: ret } <= { Group#messages_for ret: ret }
false AND false
2. About to add lower bound { { { { Group#messages_for arg: guardian }#filter_allowed_categories ret: ret }#where ret: ret }#order ret: ret } <= { Group#messages_for ret: ret }
HERE 1
HERE 1a
1. About to add upper bound { { { Group#messages_for arg: guardian }#filter_allowed_categories ret: ret }#order ret: ret } <= { Group#messages_for ret: ret }
false AND false
2. About to add lower bound { { { Group#messages_for arg: guardian }#filter_allowed_categories ret: ret }#order ret: ret } <= { Group#messages_for ret: ret }
Done with constraint generation.
*************** Infering method mentioned_posts_for from class Group ***************
2. About to add lower bound nil <= { Group#mentioned_posts_for arg: opts }
2. About to add lower bound ({  } or { Group#mentioned_posts_for arg: opts }) <= { Group#mentioned_posts_for arg: opts }
HERE 2
HERE 2a
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { { [s]Post#types ret: ret }#[] ret: ret } <= (Integer or Array<Integer>)
HERE 2
HERE 2a
1. About to add upper bound { Group#mentioned_posts_for arg: opts } <= [ []: (:category_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { Group#mentioned_posts_for arg: opts }#[] ret: ret } <= [ present?: () -> { { { Group#mentioned_posts_for arg: opts }#[] ret: ret }#present? ret: ret } ]
HERE 2
HERE 2a
HERE 2
HERE 2a
1. About to add upper bound { { Group#mentioned_posts_for arg: opts }#[] ret: ret } <= [ to_i: () -> { { { Group#mentioned_posts_for arg: opts }#[] ret: ret }#to_i ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { Group#mentioned_posts_for arg: guardian } <= [ filter_allowed_categories: (ActiveRecord_Relation<JoinTable<Post, (Topic or User or GroupMention or Category)>>) -> { { Group#mentioned_posts_for arg: guardian }#filter_allowed_categories ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { Group#mentioned_posts_for arg: opts } <= [ []: (:before_post_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ]
HERE 2
HERE 2a
HERE 2
HERE 2a
1. About to add upper bound { { Group#mentioned_posts_for arg: opts }#[] ret: ret } <= [ to_i: () -> { { { Group#mentioned_posts_for arg: opts }#[] ret: ret }#to_i ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { Group#mentioned_posts_for arg: guardian }#filter_allowed_categories ret: ret } <= [ where: ('posts.id < ?', { { { Group#mentioned_posts_for arg: opts }#[] ret: ret }#to_i ret: ret }) -> { { { Group#mentioned_posts_for arg: guardian }#filter_allowed_categories ret: ret }#where ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { Group#mentioned_posts_for arg: guardian }#filter_allowed_categories ret: ret } <= [ order: ('posts.created_at desc') -> { { { Group#mentioned_posts_for arg: guardian }#filter_allowed_categories ret: ret }#order ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { { Group#mentioned_posts_for arg: guardian }#filter_allowed_categories ret: ret }#where ret: ret } <= [ order: ('posts.created_at desc') -> { { { { Group#mentioned_posts_for arg: guardian }#filter_allowed_categories ret: ret }#where ret: ret }#order ret: ret } ]
HERE 1
HERE 1a
1. About to add upper bound { { { Group#mentioned_posts_for arg: guardian }#filter_allowed_categories ret: ret }#order ret: ret } <= { Group#mentioned_posts_for ret: ret }
false AND false
2. About to add lower bound { { { Group#mentioned_posts_for arg: guardian }#filter_allowed_categories ret: ret }#order ret: ret } <= { Group#mentioned_posts_for ret: ret }
HERE 1
HERE 1a
1. About to add upper bound { { { { Group#mentioned_posts_for arg: guardian }#filter_allowed_categories ret: ret }#where ret: ret }#order ret: ret } <= { Group#mentioned_posts_for ret: ret }
false AND false
2. About to add lower bound { { { { Group#mentioned_posts_for arg: guardian }#filter_allowed_categories ret: ret }#where ret: ret }#order ret: ret } <= { Group#mentioned_posts_for ret: ret }
Done with constraint generation.
*************** Infering method trust_group_ids from class [s]Group ***************
2. About to add lower bound Array<Integer> <= { [s]Group#trust_group_ids ret: ret }
Done with constraint generation.
*************** Infering method desired_trust_level_groups from class [s]Group ***************
HERE 2
HERE 2a
1. About to add upper bound { { [s]Group#trust_group_ids ret: ret }#keep_if block_arg: id } <= [ ==: (10) -> { { { [s]Group#trust_group_ids ret: ret }#keep_if block_arg: id }#== ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { [s]Group#desired_trust_level_groups arg: trust_level } <= [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } <= [ >=: ({ { [s]Group#trust_group_ids ret: ret }#keep_if block_arg: id }) -> { { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret }#>= ret: ret } ]
2. About to add lower bound ({ { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret }#>= ret: ret } or { { { [s]Group#trust_group_ids ret: ret }#keep_if block_arg: id }#== ret: ret }) <= { { [s]Group#trust_group_ids ret: ret }#keep_if block_ret: block_ret }
HERE 2
HERE 2a
1. About to add upper bound { [s]Group#trust_group_ids ret: ret } <= [ keep_if: () {({ { [s]Group#trust_group_ids ret: ret }#keep_if block_arg: id }) -> { { [s]Group#trust_group_ids ret: ret }#keep_if block_ret: block_ret }} -> { { [s]Group#trust_group_ids ret: ret }#keep_if ret: ret } ]
HERE 1
HERE 1a
1. About to add upper bound { { [s]Group#trust_group_ids ret: ret }#keep_if ret: ret } <= { [s]Group#desired_trust_level_groups ret: ret }
false AND false
2. About to add lower bound { { [s]Group#trust_group_ids ret: ret }#keep_if ret: ret } <= { [s]Group#desired_trust_level_groups ret: ret }
Done with constraint generation.
*************** Infering method user_trust_level_change! from class [s]Group ***************
HERE 1
HERE 1
HERE 1a
1. About to add upper bound { [s]Group#user_trust_level_change! arg: trust_level } <= { [s]Group#desired_trust_level_groups arg: trust_level }
false AND false
2. About to add lower bound { [s]Group#user_trust_level_change! arg: trust_level } <= { [s]Group#desired_trust_level_groups arg: trust_level }
HERE 2
HERE 2a
1. About to add upper bound { [s]Group#trust_group_ids ret: ret } <= [ -: ({ [s]Group#desired_trust_level_groups ret: ret }) -> { { [s]Group#trust_group_ids ret: ret }#- ret: ret } ]
HERE 2
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { { [s]Group#trust_group_ids ret: ret }#- ret: ret } <= (Array<Integer> or Integer)
HERE 2
HERE 2a
1. About to add upper bound { [s]Group#user_trust_level_change! arg: user_id } <= (Array<Integer> or Integer)
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { { [s]Group#desired_trust_level_groups ret: ret }#each block_arg: id } <= Integer
HERE 2
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { { [s]Group#desired_trust_level_groups ret: ret }#each block_arg: id } <= (Integer or Array<Integer>)
HERE 2
HERE 2a
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { [s]Group#user_trust_level_change! arg: user_id } <= Integer
2. About to add lower bound :trust_level_3 <= { [s]Group#refresh_automatic_group! arg: name }
2. About to add lower bound :trust_level_4 <= { [s]Group#refresh_automatic_group! arg: name }
2. About to add lower bound :moderators <= { [s]Group#refresh_automatic_group! arg: name }
2. About to add lower bound :staff <= { [s]Group#refresh_automatic_group! arg: name }
2. About to add lower bound :trust_level_1 <= { [s]Group#refresh_automatic_group! arg: name }
2. About to add lower bound :trust_level_2 <= { [s]Group#refresh_automatic_group! arg: name }
2. About to add lower bound :everyone <= { [s]Group#refresh_automatic_group! arg: name }
2. About to add lower bound :admins <= { [s]Group#refresh_automatic_group! arg: name }
2. About to add lower bound :trust_level_0 <= { [s]Group#refresh_automatic_group! arg: name }
2. About to add lower bound ({ [s]Group#refresh_automatic_group! ret: ret } or GroupUser) <= { { [s]Group#desired_trust_level_groups ret: ret }#each block_ret: block_ret }
HERE 2
HERE 2a
1. About to add upper bound { [s]Group#desired_trust_level_groups ret: ret } <= [ each: () {({ { [s]Group#desired_trust_level_groups ret: ret }#each block_arg: id }) -> { { [s]Group#desired_trust_level_groups ret: ret }#each block_ret: block_ret }} -> { { [s]Group#desired_trust_level_groups ret: ret }#each ret: ret } ]
HERE 1
HERE 1a
1. About to add upper bound { { [s]Group#desired_trust_level_groups ret: ret }#each ret: ret } <= { [s]Group#user_trust_level_change! ret: ret }
false AND false
2. About to add lower bound { { [s]Group#desired_trust_level_groups ret: ret }#each ret: ret } <= { [s]Group#user_trust_level_change! ret: ret }
Done with constraint generation.
*************** Infering method refresh_automatic_group! from class [s]Group ***************
2. About to add lower bound nil <= { [s]Group#refresh_automatic_group! ret: ret }
HERE 1
HERE 1
HERE 1a
1. About to add upper bound { [s]Group#refresh_automatic_group! arg: name } <= { [s]Group#lookup_group arg: name }
false AND false
2. About to add lower bound { [s]Group#refresh_automatic_group! arg: name } <= { [s]Group#lookup_group arg: name }
HERE 2
HERE 2a
1. About to add upper bound { [s]Group#refresh_automatic_group! arg: name } <= [ to_s: () -> { { [s]Group#refresh_automatic_group! arg: name }#to_s ret: ret } ]
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { { [s]Group#refresh_automatic_group! arg: name }#to_s ret: ret } <= (Symbol or String)
2. About to add lower bound String <= { [s]I18n#t arg: args }
2. About to add lower bound { locale: String } <= { [s]I18n#t arg: args }
HERE 1
HERE 1
HERE 1a
1. About to add upper bound { [s]I18n#t ret: ret } <= { [s]User#normalize_username arg: username }
false AND false
2. About to add lower bound { [s]I18n#t ret: ret } <= { [s]User#normalize_username arg: username }
HERE 1
HERE 1
HERE 1a
1. About to add upper bound { [s]User#normalize_username ret: ret } <= { UsernameValidator#initialize arg: username }
false AND false
2. About to add lower bound { [s]User#normalize_username ret: ret } <= { UsernameValidator#initialize arg: username }
HERE 1
HERE 1
HERE 1a
true AND false
HERE 2
HERE 2a
HERE 2
HERE 2a
1. About to add upper bound { [s]Group#lookup_group ret: ret } <= [ name=: ({ [s]User#normalize_username ret: ret }) -> { { [s]Group#lookup_group ret: ret }#name= ret: ret } ]
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { [s]User#normalize_username ret: ret } <= String
HERE 2
HERE 2a
1. About to add upper bound { [s]Group#visibility_levels ret: ret } <= [ []: (:staff) -> { { [s]Group#visibility_levels ret: ret }#[] ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { [s]Group#lookup_group ret: ret } <= [ visibility_level=: ({ { [s]Group#visibility_levels ret: ret }#[] ret: ret }) -> { { [s]Group#lookup_group ret: ret }#visibility_level= ret: ret } ]
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { { [s]Group#visibility_levels ret: ret }#[] ret: ret } <= Integer
HERE 2
HERE 2a
1. About to add upper bound { [s]Group#lookup_group ret: ret } <= [ save!: () -> { { [s]Group#lookup_group ret: ret }#save! ret: ret } ]
2. About to add lower bound ({ [s]Group#lookup_group ret: ret } or Group) <= { [s]Group#refresh_automatic_group! ret: ret }
HERE 2
HERE 2a
1. About to add upper bound { [s]Group#lookup_group ret: ret } <= [ update!: ({ messageable_level: 99 }) -> { { [s]Group#lookup_group ret: ret }#update! ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { [s]Group#visibility_levels ret: ret } <= [ []: (:public) -> { { [s]Group#visibility_levels ret: ret }#[] ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { [s]Group#lookup_group ret: ret } <= [ visibility_level: () -> { { [s]Group#lookup_group ret: ret }#visibility_level ret: ret } ]
HERE 2
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { { [s]Group#visibility_levels ret: ret }#[] ret: ret } <= Object
HERE 2
HERE 2a
1. About to add upper bound { { [s]Group#lookup_group ret: ret }#visibility_level ret: ret } <= [ ==: ({ { [s]Group#visibility_levels ret: ret }#[] ret: ret }) -> { { { [s]Group#lookup_group ret: ret }#visibility_level ret: ret }#== ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { [s]Group#visibility_levels ret: ret } <= [ []: (:logged_on_users) -> { { [s]Group#visibility_levels ret: ret }#[] ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { [s]Group#lookup_group ret: ret } <= [ update!: ({ visibility_level: { { [s]Group#visibility_levels ret: ret }#[] ret: ret } }) -> { { [s]Group#lookup_group ret: ret }#update! ret: ret } ]
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { { [s]Group#visibility_levels ret: ret }#[] ret: ret } <= Integer
HERE 2
HERE 2a
1. About to add upper bound { [s]Group#lookup_group ret: ret } <= [ id: () -> { { [s]Group#lookup_group ret: ret }#id ret: ret } ]
2. About to add lower bound String <= { MiniSqlMultisiteConnection#exec arg: sql }
HERE 2
HERE 2a
HERE 2
HERE 2a
2. About to add lower bound String <= { MiniSqlMultisiteConnection#exec arg: sql }
HERE 2
HERE 2a
HERE 2
HERE 2a
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { { [s]Group#lookup_group ret: ret }#id ret: ret } <= Integer
HERE 1
HERE 1a
1. About to add upper bound { [s]Group#lookup_group ret: ret } <= { [s]Group#refresh_automatic_group! ret: ret }
false AND false
2. About to add lower bound { [s]Group#lookup_group ret: ret } <= { [s]Group#refresh_automatic_group! ret: ret }
2. About to add lower bound Group <= { [s]Group#refresh_automatic_group! ret: ret }
Done with constraint generation.
*************** Infering method lookup_group from class [s]Group ***************
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { [s]Group#lookup_group arg: name } <= (Symbol or String)
2. About to add lower bound Group <= { [s]Group#lookup_group ret: ret }
Done with constraint generation.
*************** Infering method find_draft from class [s]Draft ***************
HERE 2
HERE 2a
1. About to add upper bound { [s]Draft#find_draft arg: user } <= [ is_a?: ([s]User) -> { { [s]Draft#find_draft arg: user }#is_a? ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { [s]Draft#find_draft arg: user } <= [ id: () -> { { [s]Draft#find_draft arg: user }#id ret: ret } ]
HERE 2
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { { [s]Draft#find_draft arg: user }#id ret: ret } <= Integer
HERE 2
HERE 2a
1. About to add upper bound { [s]Draft#find_draft arg: key } <= (Symbol or String)
HERE 2
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { [s]Draft#find_draft arg: user } <= Integer
HERE 2
HERE 2a
2. About to add lower bound Draft <= { [s]Draft#find_draft ret: ret }
Done with constraint generation.
*************** Infering method update_action_counts from class Topic ***************
2. About to add lower bound false <= { Topic#update_action_counts ret: ret }
2. About to add lower bound true <= { Topic#update_action_counts ret: ret }
Done with constraint generation.
*************** Infering method has_topic_embed? from class Topic ***************
2. About to add lower bound false <= { Topic#has_topic_embed? ret: ret }
2. About to add lower bound true <= { Topic#has_topic_embed? ret: ret }
Done with constraint generation.
*************** Infering method expandable_first_post? from class Topic ***************
2. About to add lower bound false <= { Topic#expandable_first_post? ret: ret }
2. About to add lower bound true <= { Topic#expandable_first_post? ret: ret }
HERE 1
HERE 1a
1. About to add upper bound { Topic#has_topic_embed? ret: ret } <= { Topic#expandable_first_post? ret: ret }
false AND false
2. About to add lower bound { Topic#has_topic_embed? ret: ret } <= { Topic#expandable_first_post? ret: ret }
Done with constraint generation.
*************** Infering method remove_for from class [s]Notification ***************
HERE 2
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { [s]Notification#remove_for arg: user_id } <= (Integer or Array<Integer>)
HERE 2
HERE 2a
1. About to add upper bound { [s]Notification#remove_for arg: topic_id } <= (Integer or Array<Integer>)
2. About to add lower bound Integer <= { [s]Notification#remove_for ret: ret }
Done with constraint generation.
*************** Infering method post from class Notification ***************
2. About to add lower bound nil <= { Notification#post ret: ret }
2. About to add lower bound Post <= { Notification#post ret: ret }
Done with constraint generation.
*************** Infering method trust_level_badge_ids from class [s]Badge ***************
2. About to add lower bound Array<Integer> <= { [s]Badge#trust_level_badge_ids ret: ret }
Done with constraint generation.
*************** Infering method reserved_username? from class [s]User ***************
HERE 1
HERE 1
HERE 1a
1. About to add upper bound { [s]User#reserved_username? arg: username } <= { [s]User#normalize_username arg: username }
false AND false
2. About to add lower bound { [s]User#reserved_username? arg: username } <= { [s]User#normalize_username arg: username }
HERE 1
HERE 1a
true AND false
HERE 2
HERE 2a
1. About to add upper bound { [s]SiteSetting#reserved_usernames ret: ret } <= [ unicode_normalize: () -> { { [s]SiteSetting#reserved_usernames ret: ret }#unicode_normalize ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { [s]SiteSetting#reserved_usernames ret: ret }#unicode_normalize ret: ret } <= [ split: ('|') -> { { { [s]SiteSetting#reserved_usernames ret: ret }#unicode_normalize ret: ret }#split ret: ret } ]
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { { { { [s]SiteSetting#reserved_usernames ret: ret }#unicode_normalize ret: ret }#split ret: ret }#any? block_arg: reserved } <= (Symbol or String)
HERE 2
HERE 2a
1. About to add upper bound { [s]User#reserved_username? arg: username } <= [ match?: (Regexp) -> { { [s]User#reserved_username? arg: username }#match? ret: ret } ]
HERE 1
HERE 1a
1. About to add upper bound { { [s]User#reserved_username? arg: username }#match? ret: ret } <= { { { { [s]SiteSetting#reserved_usernames ret: ret }#unicode_normalize ret: ret }#split ret: ret }#any? block_ret: block_ret }
false AND false
2. About to add lower bound { { [s]User#reserved_username? arg: username }#match? ret: ret } <= { { { { [s]SiteSetting#reserved_usernames ret: ret }#unicode_normalize ret: ret }#split ret: ret }#any? block_ret: block_ret }
HERE 2
HERE 2a
1. About to add upper bound { { { [s]SiteSetting#reserved_usernames ret: ret }#unicode_normalize ret: ret }#split ret: ret } <= [ any?: () {({ { { { [s]SiteSetting#reserved_usernames ret: ret }#unicode_normalize ret: ret }#split ret: ret }#any? block_arg: reserved }) -> { { { { [s]SiteSetting#reserved_usernames ret: ret }#unicode_normalize ret: ret }#split ret: ret }#any? block_ret: block_ret }} -> { { { { [s]SiteSetting#reserved_usernames ret: ret }#unicode_normalize ret: ret }#split ret: ret }#any? ret: ret } ]
HERE 1
HERE 1a
1. About to add upper bound { { { { [s]SiteSetting#reserved_usernames ret: ret }#unicode_normalize ret: ret }#split ret: ret }#any? ret: ret } <= { [s]User#reserved_username? ret: ret }
false AND false
2. About to add lower bound { { { { [s]SiteSetting#reserved_usernames ret: ret }#unicode_normalize ret: ret }#split ret: ret }#any? ret: ret } <= { [s]User#reserved_username? ret: ret }
Done with constraint generation.
*************** Infering method valid_after from class [s]EmailToken ***************
HERE 2
HERE 2a
1. About to add upper bound { [s]SiteSetting#email_token_valid_hours ret: ret } <= [ hours: () -> { { [s]SiteSetting#email_token_valid_hours ret: ret }#hours ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { [s]SiteSetting#email_token_valid_hours ret: ret }#hours ret: ret } <= [ ago: () -> { { { [s]SiteSetting#email_token_valid_hours ret: ret }#hours ret: ret }#ago ret: ret } ]
HERE 1
HERE 1a
1. About to add upper bound { { { [s]SiteSetting#email_token_valid_hours ret: ret }#hours ret: ret }#ago ret: ret } <= { [s]EmailToken#valid_after ret: ret }
false AND false
2. About to add lower bound { { { [s]SiteSetting#email_token_valid_hours ret: ret }#hours ret: ret }#ago ret: ret } <= { [s]EmailToken#valid_after ret: ret }
Done with constraint generation.
*************** Infering method confirm from class [s]EmailToken ***************
2. About to add lower bound false <= { [s]EmailToken#confirm arg: skip_reviewable }
HERE 1
HERE 1
HERE 1a
1. About to add upper bound { [s]EmailToken#confirm arg: token } <= { [s]EmailToken#atomic_confirm arg: token }
false AND false
2. About to add lower bound { [s]EmailToken#confirm arg: token } <= { [s]EmailToken#atomic_confirm arg: token }
HERE 2
HERE 2a
1. About to add upper bound { [s]EmailToken#atomic_confirm ret: ret } <= [ []: (:user) -> { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { [s]EmailToken#atomic_confirm ret: ret } <= [ []: (:success) -> { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret } <= [ active?: () -> { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#active? ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#active? ret: ret } <= [ !: () -> { { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#active? ret: ret }#! ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret } <= [ send_welcome_message=: ({ { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#active? ret: ret }#! ret: ret }) -> { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#send_welcome_message= ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { [s]EmailToken#atomic_confirm ret: ret } <= [ []: (:email_token) -> { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret } <= [ email: () -> { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret } <= [ email=: ({ { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret }) -> { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email= ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret } <= [ active=: (true) -> { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#active= ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret } <= [ custom_fields: () -> { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#custom_fields ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#custom_fields ret: ret } <= [ delete: ('activation_reminder') -> { { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#custom_fields ret: ret }#delete ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret } <= [ save!: () -> { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#save! ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret } <= [ create_reviewable: () -> { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#create_reviewable ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret } <= [ set_automatic_groups: () -> { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#set_automatic_groups ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret } <= [ email: () -> { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } ]
HERE 1
HERE 1
HERE 1a
1. About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= { [s]Invite#redeem_from_email arg: email }
false AND false
2. About to add lower bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= { [s]Invite#redeem_from_email arg: email }
HERE 2
HERE 2a
1. About to add upper bound { [s]Invite#redeem_from_email ret: ret } <= [ present?: () -> { { [s]Invite#redeem_from_email ret: ret }#present? ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret } <= [ reload: () -> { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#reload ret: ret } ]
HERE 1
HERE 1a
1. About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#reload ret: ret } <= { [s]EmailToken#confirm ret: ret }
false AND false
2. About to add lower bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#reload ret: ret } <= { [s]EmailToken#confirm ret: ret }
2. About to add lower bound nil <= { [s]EmailToken#confirm ret: ret }
HERE 1
HERE 1a
1. About to add upper bound { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret } <= { [s]EmailToken#confirm ret: ret }
false AND false
2. About to add lower bound { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret } <= { [s]EmailToken#confirm ret: ret }
Done with constraint generation.
*************** Infering method confirmable from class [s]EmailToken ***************
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { [s]EmailToken#confirmable arg: token } <= (Symbol or String or Array<(Symbol or String)>)
2. About to add lower bound EmailToken <= { [s]EmailToken#confirmable ret: ret }
Done with constraint generation.
*************** Infering method redeem_from_email from class [s]Invite ***************
HERE 1
HERE 1
HERE 1a
1. About to add upper bound { [s]Invite#redeem_from_email arg: email } <= { [s]Email#downcase arg: email }
false AND false
2. About to add lower bound { [s]Invite#redeem_from_email arg: email } <= { [s]Email#downcase arg: email }
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { [s]Email#downcase ret: ret } <= (Symbol or String)
2. About to add lower bound Invite <= { InviteRedeemer#initialize arg:  }
2. About to add lower bound Invite <= { [s]Invite#redeem_from_email ret: ret }
Done with constraint generation.
*************** Infering method downcase from class [s]Email ***************
HERE 1
HERE 1
HERE 1a
1. About to add upper bound { [s]Email#downcase arg: email } <= { [s]Email#is_valid? arg: email }
false AND false
2. About to add lower bound { [s]Email#downcase arg: email } <= { [s]Email#is_valid? arg: email }
HERE 1
HERE 1a
1. About to add upper bound { [s]Email#downcase arg: email } <= { [s]Email#downcase ret: ret }
false AND false
2. About to add lower bound { [s]Email#downcase arg: email } <= { [s]Email#downcase ret: ret }
HERE 2
HERE 2a
1. About to add upper bound { [s]Email#downcase arg: email } <= [ downcase: () -> { { [s]Email#downcase arg: email }#downcase ret: ret } ]
HERE 1
HERE 1a
1. About to add upper bound { { [s]Email#downcase arg: email }#downcase ret: ret } <= { [s]Email#downcase ret: ret }
false AND false
2. About to add lower bound { { [s]Email#downcase arg: email }#downcase ret: ret } <= { [s]Email#downcase ret: ret }
Done with constraint generation.
*************** Infering method is_valid? from class [s]Email ***************
2. About to add lower bound false <= { [s]Email#is_valid? ret: ret }
HERE 2
HERE 2a
1. About to add upper bound { [s]EmailValidator#email_regex ret: ret } <= [ =~: ({ [s]Email#is_valid? arg: email }) -> { { [s]EmailValidator#email_regex ret: ret }#=~ ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { [s]EmailValidator#email_regex ret: ret }#=~ ret: ret } <= [ !: () -> { { { [s]EmailValidator#email_regex ret: ret }#=~ ret: ret }#! ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { { [s]EmailValidator#email_regex ret: ret }#=~ ret: ret }#! ret: ret } <= [ !: () -> { { { { [s]EmailValidator#email_regex ret: ret }#=~ ret: ret }#! ret: ret }#! ret: ret } ]
HERE 1
HERE 1a
1. About to add upper bound { { { { [s]EmailValidator#email_regex ret: ret }#=~ ret: ret }#! ret: ret }#! ret: ret } <= { [s]Email#is_valid? ret: ret }
false AND false
2. About to add lower bound { { { { [s]EmailValidator#email_regex ret: ret }#=~ ret: ret }#! ret: ret }#! ret: ret } <= { [s]Email#is_valid? ret: ret }
Done with constraint generation.
*************** Infering method notify_flag_type_ids from class [s]PostActionType ***************
HERE 2
HERE 2a
1. About to add upper bound { [s]PostActionType#notify_flag_types ret: ret } <= [ values: () -> { { [s]PostActionType#notify_flag_types ret: ret }#values ret: ret } ]
HERE 1
HERE 1a
1. About to add upper bound { { [s]PostActionType#notify_flag_types ret: ret }#values ret: ret } <= { [s]PostActionType#notify_flag_type_ids ret: ret }
false AND false
2. About to add lower bound { { [s]PostActionType#notify_flag_types ret: ret }#values ret: ret } <= { [s]PostActionType#notify_flag_type_ids ret: ret }
Done with constraint generation.
*************** Infering method notify_flag_types from class [s]PostActionType ***************
HERE 2
HERE 2a
1. About to add upper bound { [s]PostActionType#flag_settings ret: ret } <= [ notify_types: () -> { { [s]PostActionType#flag_settings ret: ret }#notify_types ret: ret } ]
HERE 1
HERE 1a
1. About to add upper bound { { [s]PostActionType#flag_settings ret: ret }#notify_types ret: ret } <= { [s]PostActionType#notify_flag_types ret: ret }
false AND false
2. About to add lower bound { { [s]PostActionType#flag_settings ret: ret }#notify_types ret: ret } <= { [s]PostActionType#notify_flag_types ret: ret }
Done with constraint generation.
*************** Infering method flag_settings from class [s]PostActionType ***************
2. About to add lower bound FlagSettings <= { PostActionType# var: @flag_settings }
HERE 2
HERE 2a
1. About to add upper bound { PostActionType# var: @flag_settings } <= [ add: (3, :off_topic, { notify_type: true, auto_action_type: true }) -> { { PostActionType# var: @flag_settings }#add ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { PostActionType# var: @flag_settings } <= [ add: (4, :inappropriate, { topic_type: true, notify_type: true, auto_action_type: true }) -> { { PostActionType# var: @flag_settings }#add ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { PostActionType# var: @flag_settings } <= [ add: (8, :spam, { topic_type: true, notify_type: true, auto_action_type: true }) -> { { PostActionType# var: @flag_settings }#add ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { PostActionType# var: @flag_settings } <= [ add: (6, :notify_user, { topic_type: false, notify_type: false, custom_type: true }) -> { { PostActionType# var: @flag_settings }#add ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { PostActionType# var: @flag_settings } <= [ add: (7, :notify_moderators, { topic_type: true, notify_type: true, custom_type: true }) -> { { PostActionType# var: @flag_settings }#add ret: ret } ]
HERE 1
HERE 1a
1. About to add upper bound { PostActionType# var: @flag_settings } <= { [s]PostActionType#flag_settings ret: ret }
false AND false
2. About to add lower bound { PostActionType# var: @flag_settings } <= { [s]PostActionType#flag_settings ret: ret }
Done with constraint generation.
*************** Infering method new_user_posting_on_first_day? from class User ***************
HERE 2
HERE 2a
1. About to add upper bound { User#staff? ret: ret } <= [ !: () -> { { User#staff? ret: ret }#! ret: ret } ]
2. About to add lower bound 2 <= { [s]TrustLevel#[] arg: level }
HERE 2
HERE 2
HERE 2
HERE 2
HERE 2
HERE 2
HERE 2
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { [s]TrustLevel#[] ret: ret } <= Numeric
2. About to add lower bound 0 <= { [s]TrustLevel#[] arg: level }
HERE 2
HERE 2
HERE 2
HERE 2a
1. About to add upper bound { [s]TrustLevel#[] ret: ret } <= Object
HERE 2
HERE 2a
1. About to add upper bound { User#first_post_created_at ret: ret } <= [ nil?: () -> { { User#first_post_created_at ret: ret }#nil? ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { Integer#hours ret: ret } <= [ ago: () -> { { Integer#hours ret: ret }#ago ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { User#first_post_created_at ret: ret } <= [ >=: ({ { Integer#hours ret: ret }#ago ret: ret }) -> { { User#first_post_created_at ret: ret }#>= ret: ret } ]
2. About to add lower bound false <= { User#new_user_posting_on_first_day? ret: ret }
2. About to add lower bound true <= { User#new_user_posting_on_first_day? ret: ret }
HERE 1
HERE 1a
1. About to add upper bound { { User#first_post_created_at ret: ret }#nil? ret: ret } <= { User#new_user_posting_on_first_day? ret: ret }
false AND false
2. About to add lower bound { { User#first_post_created_at ret: ret }#nil? ret: ret } <= { User#new_user_posting_on_first_day? ret: ret }
HERE 1
HERE 1a
1. About to add upper bound { { User#first_post_created_at ret: ret }#>= ret: ret } <= { User#new_user_posting_on_first_day? ret: ret }
false AND false
2. About to add lower bound { { User#first_post_created_at ret: ret }#>= ret: ret } <= { User#new_user_posting_on_first_day? ret: ret }
Done with constraint generation.
*************** Infering method first_post_created_at from class User ***************
2. About to add lower bound DateTime <= { User#first_post_created_at ret: ret }
2. About to add lower bound Time <= { User#first_post_created_at ret: ret }
Done with constraint generation.
*************** Infering method initialize from class RateLimiter ***************
2. About to add lower bound false <= { RateLimiter#initialize arg: global }
HERE 1
HERE 1a
1. About to add upper bound { RateLimiter#initialize arg: user } <= { RateLimiter# var: @user }
false AND false
2. About to add lower bound { RateLimiter#initialize arg: user } <= { RateLimiter# var: @user }
HERE 1
HERE 1a
1. About to add upper bound { RateLimiter#initialize arg: type } <= { RateLimiter# var: @type }
false AND false
2. About to add lower bound { RateLimiter#initialize arg: type } <= { RateLimiter# var: @type }
HERE 1
HERE 1
HERE 1a
1. About to add upper bound { RateLimiter#initialize arg: type } <= { RateLimiter#build_key arg: type }
false AND false
2. About to add lower bound { RateLimiter#initialize arg: type } <= { RateLimiter#build_key arg: type }
HERE 1
HERE 1a
1. About to add upper bound { RateLimiter#build_key ret: ret } <= { RateLimiter# var: @key }
false AND false
2. About to add lower bound { RateLimiter#build_key ret: ret } <= { RateLimiter# var: @key }
HERE 1
HERE 1a
1. About to add upper bound { RateLimiter#initialize arg: max } <= { RateLimiter# var: @max }
false AND false
2. About to add lower bound { RateLimiter#initialize arg: max } <= { RateLimiter# var: @max }
HERE 1
HERE 1a
1. About to add upper bound { RateLimiter#initialize arg: secs } <= { RateLimiter# var: @secs }
false AND false
2. About to add lower bound { RateLimiter#initialize arg: secs } <= { RateLimiter# var: @secs }
HERE 1
HERE 1a
1. About to add upper bound { RateLimiter#initialize arg: global } <= { RateLimiter# var: @global }
false AND false
2. About to add lower bound { RateLimiter#initialize arg: global } <= { RateLimiter# var: @global }
Done with constraint generation.
*************** Infering method initialize from class UsernameValidator ***************
HERE 2
HERE 2a
1. About to add upper bound { UsernameValidator#initialize arg: username } <= [ unicode_normalize: () -> { { UsernameValidator#initialize arg: username }#unicode_normalize ret: ret } ]
HERE 1
HERE 1a
1. About to add upper bound { { UsernameValidator#initialize arg: username }#unicode_normalize ret: ret } <= { UsernameValidator# var: @username }
false AND false
2. About to add lower bound { { UsernameValidator#initialize arg: username }#unicode_normalize ret: ret } <= { UsernameValidator# var: @username }
2. About to add lower bound [] <= { UsernameValidator# var: @errors }
Done with constraint generation.
*************** Infering method valid_format? from class UsernameValidator ***************
HERE 2
HERE 2a
1. About to add upper bound { UsernameValidator#errors ret: ret } <= [ empty?: () -> { { UsernameValidator#errors ret: ret }#empty? ret: ret } ]
HERE 1
HERE 1a
1. About to add upper bound { { UsernameValidator#errors ret: ret }#empty? ret: ret } <= { UsernameValidator#valid_format? ret: ret }
false AND false
2. About to add lower bound { { UsernameValidator#errors ret: ret }#empty? ret: ret } <= { UsernameValidator#valid_format? ret: ret }
Done with constraint generation.
*************** Infering method username_length_min? from class UsernameValidator ***************
HERE 2
HERE 2a
2. About to add lower bound nil <= { UsernameValidator#username_length_min? ret: ret }
HERE 2
HERE 2a
1. About to add upper bound { [s]User#username_length ret: ret } <= [ begin: () -> { { [s]User#username_length ret: ret }#begin ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { UsernameValidator#username_grapheme_clusters ret: ret } <= [ size: () -> { { UsernameValidator#username_grapheme_clusters ret: ret }#size ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { UsernameValidator#username_grapheme_clusters ret: ret }#size ret: ret } <= [ <: ({ { [s]User#username_length ret: ret }#begin ret: ret }) -> { { { UsernameValidator#username_grapheme_clusters ret: ret }#size ret: ret }#< ret: ret } ]
HERE 2
HERE 2a
2. About to add lower bound :user.username.short <= { [s]I18n#t arg: args }
2. About to add lower bound { min: { { [s]User#username_length ret: ret }#begin ret: ret } } <= { [s]I18n#t arg: args }
HERE 2
HERE 2a
1. About to add upper bound { UsernameValidator#errors ret: ret } <= [ <<: ({ [s]I18n#t ret: ret }) -> { { UsernameValidator#errors ret: ret }#<< ret: ret } ]
HERE 1
HERE 1a
1. About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_length_min? ret: ret }
false AND false
2. About to add lower bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_length_min? ret: ret }
Done with constraint generation.
*************** Infering method username_length_max? from class UsernameValidator ***************
HERE 2
HERE 2a
2. About to add lower bound nil <= { UsernameValidator#username_length_max? ret: ret }
HERE 2
HERE 2a
1. About to add upper bound { [s]User#username_length ret: ret } <= [ end: () -> { { [s]User#username_length ret: ret }#end ret: ret } ]
HERE 2
HERE 2a
HERE 2
HERE 2a
1. About to add upper bound { { UsernameValidator#username_grapheme_clusters ret: ret }#size ret: ret } <= [ >: ({ { [s]User#username_length ret: ret }#end ret: ret }) -> { { { UsernameValidator#username_grapheme_clusters ret: ret }#size ret: ret }#> ret: ret } ]
HERE 2
HERE 2a
2. About to add lower bound :user.username.long <= { [s]I18n#t arg: args }
2. About to add lower bound { max: { { [s]User#username_length ret: ret }#end ret: ret } } <= { [s]I18n#t arg: args }
HERE 2
HERE 2a
HERE 2
HERE 2a
1. About to add upper bound { UsernameValidator#username ret: ret } <= [ length: () -> { { UsernameValidator#username ret: ret }#length ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { UsernameValidator#username ret: ret }#length ret: ret } <= [ >: (60) -> { { { UsernameValidator#username ret: ret }#length ret: ret }#> ret: ret } ]
2. About to add lower bound :user.username.too_long <= { [s]I18n#t arg: args }
HERE 2
HERE 2a
HERE 1
HERE 1a
1. About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_length_max? ret: ret }
false AND false
2. About to add lower bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_length_max? ret: ret }
Done with constraint generation.
*************** Infering method username_char_valid? from class UsernameValidator ***************
HERE 2
HERE 2a
2. About to add lower bound nil <= { UsernameValidator#username_char_valid? ret: ret }
HERE 2
HERE 2a
1. About to add upper bound { [s]UsernameValidator#invalid_char_pattern ret: ret } <= [ match?: ({ UsernameValidator#username ret: ret }) -> { { [s]UsernameValidator#invalid_char_pattern ret: ret }#match? ret: ret } ]
2. About to add lower bound :user.username.characters <= { [s]I18n#t arg: args }
HERE 2
HERE 2a
HERE 1
HERE 1a
1. About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_char_valid? ret: ret }
false AND false
2. About to add lower bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_char_valid? ret: ret }
Done with constraint generation.
*************** Infering method username_char_whitelisted? from class UsernameValidator ***************
HERE 2
HERE 2a
2. About to add lower bound nil <= { UsernameValidator#username_char_whitelisted? ret: ret }
HERE 2
HERE 2a
1. About to add upper bound { UsernameValidator#username ret: ret } <= [ chars: () -> { { UsernameValidator#username ret: ret }#chars ret: ret } ]
HERE 1
HERE 1
HERE 1a
1. About to add upper bound { { { UsernameValidator#username ret: ret }#chars ret: ret }#any? block_arg: c } <= { [s]UsernameValidator#whitelisted_char? arg: c }
false AND false
2. About to add lower bound { { { UsernameValidator#username ret: ret }#chars ret: ret }#any? block_arg: c } <= { [s]UsernameValidator#whitelisted_char? arg: c }
HERE 2
HERE 2a
1. About to add upper bound { [s]UsernameValidator#whitelisted_char? ret: ret } <= [ !: () -> { { [s]UsernameValidator#whitelisted_char? ret: ret }#! ret: ret } ]
HERE 1
HERE 1a
1. About to add upper bound { { [s]UsernameValidator#whitelisted_char? ret: ret }#! ret: ret } <= { { { UsernameValidator#username ret: ret }#chars ret: ret }#any? block_ret: block_ret }
false AND false
2. About to add lower bound { { [s]UsernameValidator#whitelisted_char? ret: ret }#! ret: ret } <= { { { UsernameValidator#username ret: ret }#chars ret: ret }#any? block_ret: block_ret }
HERE 2
HERE 2a
1. About to add upper bound { { UsernameValidator#username ret: ret }#chars ret: ret } <= [ any?: () {({ { { UsernameValidator#username ret: ret }#chars ret: ret }#any? block_arg: c }) -> { { { UsernameValidator#username ret: ret }#chars ret: ret }#any? block_ret: block_ret }} -> { { { UsernameValidator#username ret: ret }#chars ret: ret }#any? ret: ret } ]
HERE 2
HERE 2a
HERE 1
HERE 1a
1. About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_char_whitelisted? ret: ret }
false AND false
2. About to add lower bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_char_whitelisted? ret: ret }
Done with constraint generation.
*************** Infering method username_first_char_valid? from class UsernameValidator ***************
HERE 2
HERE 2a
2. About to add lower bound nil <= { UsernameValidator#username_first_char_valid? ret: ret }
HERE 2
HERE 2a
1. About to add upper bound { UsernameValidator#username_grapheme_clusters ret: ret } <= [ first: () -> { { UsernameValidator#username_grapheme_clusters ret: ret }#first ret: ret } ]
HERE 1
HERE 1
HERE 1a
1. About to add upper bound { { UsernameValidator#username_grapheme_clusters ret: ret }#first ret: ret } <= { Regexp#match? arg:  }
false AND false
2. About to add lower bound { { UsernameValidator#username_grapheme_clusters ret: ret }#first ret: ret } <= { Regexp#match? arg:  }
2. About to add lower bound :user.username.must_begin_with_alphanumeric_or_underscore <= { [s]I18n#t arg: args }
HERE 2
HERE 2a
HERE 1
HERE 1a
1. About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_first_char_valid? ret: ret }
false AND false
2. About to add lower bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_first_char_valid? ret: ret }
Done with constraint generation.
*************** Infering method username_last_char_valid? from class UsernameValidator ***************
HERE 2
HERE 2a
2. About to add lower bound nil <= { UsernameValidator#username_last_char_valid? ret: ret }
HERE 2
HERE 2a
1. About to add upper bound { UsernameValidator#username_grapheme_clusters ret: ret } <= [ last: () -> { { UsernameValidator#username_grapheme_clusters ret: ret }#last ret: ret } ]
HERE 1
HERE 1
HERE 1a
1. About to add upper bound { { UsernameValidator#username_grapheme_clusters ret: ret }#last ret: ret } <= { Regexp#match? arg:  }
false AND false
2. About to add lower bound { { UsernameValidator#username_grapheme_clusters ret: ret }#last ret: ret } <= { Regexp#match? arg:  }
2. About to add lower bound :user.username.must_end_with_alphanumeric <= { [s]I18n#t arg: args }
HERE 2
HERE 2a
HERE 1
HERE 1a
1. About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_last_char_valid? ret: ret }
false AND false
2. About to add lower bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_last_char_valid? ret: ret }
Done with constraint generation.
*************** Infering method username_no_double_special? from class UsernameValidator ***************
HERE 2
HERE 2a
2. About to add lower bound nil <= { UsernameValidator#username_no_double_special? ret: ret }
HERE 1
HERE 1
HERE 1a
1. About to add upper bound { UsernameValidator#username ret: ret } <= { Regexp#match? arg:  }
false AND false
2. About to add lower bound { UsernameValidator#username ret: ret } <= { Regexp#match? arg:  }
2. About to add lower bound :user.username.must_not_contain_two_special_chars_in_seq <= { [s]I18n#t arg: args }
HERE 2
HERE 2a
HERE 1
HERE 1a
1. About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_no_double_special? ret: ret }
false AND false
2. About to add lower bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_no_double_special? ret: ret }
Done with constraint generation.
*************** Infering method username_does_not_end_with_confusing_suffix? from class UsernameValidator ***************
HERE 2
HERE 2a
2. About to add lower bound nil <= { UsernameValidator#username_does_not_end_with_confusing_suffix? ret: ret }
HERE 1
HERE 1
HERE 1a
true AND false
2. About to add lower bound :user.username.must_not_end_with_confusing_suffix <= { [s]I18n#t arg: args }
HERE 2
HERE 2a
HERE 1
HERE 1a
1. About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_does_not_end_with_confusing_suffix? ret: ret }
false AND false
2. About to add lower bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_does_not_end_with_confusing_suffix? ret: ret }
Done with constraint generation.
*************** Infering method normalize_username from class [s]User ***************
HERE 2
HERE 2a
1. About to add upper bound { [s]User#normalize_username arg: username } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { [s]User#normalize_username arg: username } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
HERE 2
HERE 2a
1. About to add upper bound { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } <= [ downcase: () -> { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } ]
2. About to add lower bound nil <= { [s]User#normalize_username ret: ret }
HERE 1
HERE 1a
1. About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= { [s]User#normalize_username ret: ret }
false AND false
2. About to add lower bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= { [s]User#normalize_username ret: ret }
Done with constraint generation.
*************** Infering method username_exists? from class [s]User ***************
HERE 1
HERE 1
HERE 1a
1. About to add upper bound { [s]User#username_exists? arg: username } <= { [s]User#normalize_username arg: username }
false AND false
2. About to add lower bound { [s]User#username_exists? arg: username } <= { [s]User#normalize_username arg: username }
HERE 1
HERE 1a
true AND false
2. About to add lower bound String <= { MiniSqlMultisiteConnection#exec arg: sql }
2. About to add lower bound { username: { [s]User#username_exists? arg: username } } <= { MiniSqlMultisiteConnection#exec arg: params }
HERE 2
HERE 2a
1. About to add upper bound { MiniSqlMultisiteConnection#exec ret: ret } <= [ >: (0) -> { { MiniSqlMultisiteConnection#exec ret: ret }#> ret: ret } ]
HERE 1
HERE 1a
1. About to add upper bound { { MiniSqlMultisiteConnection#exec ret: ret }#> ret: ret } <= { [s]User#username_exists? ret: ret }
false AND false
2. About to add lower bound { { MiniSqlMultisiteConnection#exec ret: ret }#> ret: ret } <= { [s]User#username_exists? ret: ret }
Done with constraint generation.
*************** Infering method create_reviewable from class User ***************
2. About to add lower bound nil <= { User#create_reviewable ret: ret }
2. About to add lower bound :create_user_reviewable <= { [s]Jobs#enqueue arg: job_name }
2. About to add lower bound { user_id: Integer } <= { [s]Jobs#enqueue arg: opts }
HERE 1
HERE 1a
1. About to add upper bound { [s]Jobs#enqueue ret: ret } <= { User#create_reviewable ret: ret }
false AND false
2. About to add lower bound { [s]Jobs#enqueue ret: ret } <= { User#create_reviewable ret: ret }
Done with constraint generation.
Starting constraint resolution...
Resolving constraints from PostActionType and @flag_settings
About to add lower bound FlagSettings <= { PostActionType# var: @flag_settings }
About to add lower bound FlagSettings <= { [s]PostActionType#flag_settings ret: ret }
About to add upper bound { PostActionType# var: @flag_settings } <= [ add: (3, :off_topic, { notify_type: true, auto_action_type: true }) -> { { PostActionType# var: @flag_settings }#add ret: ret } ]
About to add upper bound { PostActionType# var: @flag_settings } <= [ add: (4, :inappropriate, { topic_type: true, notify_type: true, auto_action_type: true }) -> { { PostActionType# var: @flag_settings }#add ret: ret } ]
About to add upper bound { PostActionType# var: @flag_settings } <= [ add: (8, :spam, { topic_type: true, notify_type: true, auto_action_type: true }) -> { { PostActionType# var: @flag_settings }#add ret: ret } ]
About to add upper bound { PostActionType# var: @flag_settings } <= [ add: (6, :notify_user, { topic_type: false, notify_type: false, custom_type: true }) -> { { PostActionType# var: @flag_settings }#add ret: ret } ]
About to add upper bound { PostActionType# var: @flag_settings } <= [ add: (7, :notify_moderators, { topic_type: true, notify_type: true, custom_type: true }) -> { { PostActionType# var: @flag_settings }#add ret: ret } ]
About to add upper bound { PostActionType# var: @flag_settings } <= { [s]PostActionType#flag_settings ret: ret }
Resolving constraints from RateLimiter and @user
About to add lower bound { RateLimiter#initialize arg: user } <= { RateLimiter# var: @user }
Resolving constraints from RateLimiter and @type
About to add lower bound { RateLimiter#initialize arg: type } <= { RateLimiter# var: @type }
Resolving constraints from RateLimiter and @key
About to add lower bound { RateLimiter#build_key ret: ret } <= { RateLimiter# var: @key }
Resolving constraints from RateLimiter and @max
About to add lower bound { RateLimiter#initialize arg: max } <= { RateLimiter# var: @max }
Resolving constraints from RateLimiter and @secs
About to add lower bound { RateLimiter#initialize arg: secs } <= { RateLimiter# var: @secs }
Resolving constraints from RateLimiter and @global
About to add lower bound { RateLimiter#initialize arg: global } <= { RateLimiter# var: @global }
Resolving constraints from UsernameValidator and @username
About to add lower bound { { UsernameValidator#initialize arg: username }#unicode_normalize ret: ret } <= { UsernameValidator# var: @username }
Resolving constraints from UsernameValidator and @errors
About to add lower bound [] <= { UsernameValidator# var: @errors }
Resolving constraints from [s]User and new_from_params
About to add upper bound { [s]User#new_from_params arg: params } <= [ []: (:name) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ]
About to add upper bound { [s]User#new_from_params arg: params } <= [ []: (:email) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ]
About to add upper bound { [s]User#new_from_params arg: params } <= [ []: (:password) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ]
About to add upper bound { [s]User#new_from_params arg: params } <= [ []: (:username) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ]
About to add lower bound User <= { [s]User#new_from_params ret: ret }
Resolving constraints from [s]User and find_by_username
About to add upper bound { [s]User#find_by_username arg: username } <= { [s]User#normalize_username arg: username }
About to add lower bound User <= { [s]User#find_by_username ret: ret }
Resolving constraints from [s]User and username_available?
About to add upper bound { [s]User#username_available? arg: username } <= { [s]User#normalize_username arg: username }
About to add lower bound nil <= { [s]User#username_available? arg: email }
About to add upper bound { [s]User#username_available? arg: email } <= [ present?: () -> { { [s]User#username_available? arg: email }#present? ret: ret } ]
About to add lower bound false <= { [s]User#username_available? arg: allow_reserved_username }
About to add lower bound (false or true) <= { { [s]User#username_available? arg: allow_reserved_username }#! ret: ret }
About to add upper bound { [s]User#username_available? arg: allow_reserved_username } <= [ !: () -> { { [s]User#username_available? arg: allow_reserved_username }#! ret: ret } ]
About to add lower bound false <= { [s]User#username_available? ret: ret }
About to add lower bound true <= { [s]User#username_available? ret: ret }
Resolving constraints from User and featured_user_badges
About to add lower bound 3 <= { User#featured_user_badges arg: limit }
About to add upper bound { User#featured_user_badges arg: limit } <= Integer
About to add lower bound Array<(Topic or User or Post or UserBadge or Badge or BadgeType or GrantedBy)> <= { User#featured_user_badges ret: ret }
Resolving constraints from User and email_confirmed?
About to add lower bound false <= { User#email_confirmed? ret: ret }
About to add lower bound true <= { User#email_confirmed? ret: ret }
Resolving constraints from User and activate
About to add lower bound { User#create_reviewable ret: ret } <= { User#activate ret: ret }
Resolving constraints from User and number_of_deleted_posts
About to add lower bound Integer <= { User#number_of_deleted_posts ret: ret }
Resolving constraints from User and number_of_flags_given
About to add lower bound Integer <= { User#number_of_flags_given ret: ret }
Resolving constraints from User and create_user_profile
About to add lower bound UserProfile <= { User#create_user_profile ret: ret }
Resolving constraints from User and create_user_option
About to add lower bound UserOption <= { User#create_user_option ret: ret }
Resolving constraints from User and create_email_token
About to add lower bound EmailToken <= { User#create_email_token ret: ret }
Resolving constraints from User and update_usernames
About to add lower bound String <= { User#update_usernames ret: ret }
Resolving constraints from User and seen_before?
About to add lower bound false <= { User#seen_before? ret: ret }
About to add lower bound true <= { User#seen_before? ret: ret }
Resolving constraints from [s]EmailToken and active
About to add lower bound ActiveRecord_Relation<EmailToken> <= { [s]EmailToken#active ret: ret }
Resolving constraints from Post and seen?
About to add upper bound { Post#seen? arg: user } <= [ id: () -> { { Post#seen? arg: user }#id ret: ret } ]
About to add lower bound false <= { Post#seen? ret: ret }
About to add lower bound true <= { Post#seen? ret: ret }
Resolving constraints from [s]Post and find_by_detail
About to add upper bound { [s]Post#find_by_detail arg: key } <= (Symbol or String)
About to add upper bound { [s]Post#find_by_detail arg: value } <= (Symbol or String)
About to add lower bound Post <= { [s]Post#find_by_detail ret: ret }
Resolving constraints from Post and is_flagged?
About to add lower bound false <= { Post#is_flagged? ret: ret }
About to add lower bound true <= { Post#is_flagged? ret: ret }
Resolving constraints from Post and is_reply_by_email?
About to add lower bound false <= { Post#is_reply_by_email? ret: ret }
About to add lower bound true <= { Post#is_reply_by_email? ret: ret }
Resolving constraints from Post and add_detail
About to add upper bound { Post#add_detail arg: key } <= (Symbol or String)
About to add upper bound { Post#add_detail arg: value } <= (Symbol or String)
About to add lower bound nil <= { Post#add_detail arg: extra }
About to add upper bound { Post#add_detail arg: extra } <= (Symbol or String)
About to add lower bound PostDetail <= { Post#add_detail ret: ret }
Resolving constraints from Post and limit_posts_per_day
About to add lower bound RateLimiter <= { Post#limit_posts_per_day ret: ret }
Resolving constraints from [s]Archetype and private_message
About to add lower bound 'private_message' <= { [s]Archetype#private_message ret: ret }
Resolving constraints from Group and posts_for
About to add upper bound { Group#posts_for arg: guardian } <= [ filter_allowed_categories: (ActiveRecord_Relation<JoinTable<Post, (Topic or User or Category or Group)>>) -> { { Group#posts_for arg: guardian }#filter_allowed_categories ret: ret } ]
About to add lower bound nil <= { Group#posts_for arg: opts }
About to add lower bound ({  } or { Group#posts_for arg: opts }) <= { Group#posts_for arg: opts }
HERE 2
HERE 2a
HERE 2
HERE 2a
About to add upper bound { Group#posts_for arg: opts } <= [ []: (:category_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ]
HERE 2
HERE 2a
About to add upper bound { Group#posts_for arg: opts } <= [ []: (:before_post_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ]
HERE 2
HERE 2a
About to add lower bound { { { { Group#posts_for arg: guardian }#filter_allowed_categories ret: ret }#where ret: ret }#order ret: ret } <= { Group#posts_for ret: ret }
About to add lower bound { { { Group#posts_for arg: guardian }#filter_allowed_categories ret: ret }#order ret: ret } <= { Group#posts_for ret: ret }
Resolving constraints from Group and messages_for
About to add upper bound { Group#messages_for arg: guardian } <= [ filter_allowed_categories: (ActiveRecord_Relation<JoinTable<Post, (Topic or User or Category)>>) -> { { Group#messages_for arg: guardian }#filter_allowed_categories ret: ret } ]
About to add lower bound nil <= { Group#messages_for arg: opts }
About to add lower bound ({  } or { Group#messages_for arg: opts }) <= { Group#messages_for arg: opts }
HERE 2
HERE 2a
HERE 2
HERE 2a
About to add upper bound { Group#messages_for arg: opts } <= [ []: (:category_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ]
HERE 2
HERE 2a
About to add upper bound { Group#messages_for arg: opts } <= [ []: (:before_post_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ]
HERE 2
HERE 2a
About to add lower bound { { { { Group#messages_for arg: guardian }#filter_allowed_categories ret: ret }#where ret: ret }#order ret: ret } <= { Group#messages_for ret: ret }
About to add lower bound { { { Group#messages_for arg: guardian }#filter_allowed_categories ret: ret }#order ret: ret } <= { Group#messages_for ret: ret }
Resolving constraints from Group and mentioned_posts_for
About to add upper bound { Group#mentioned_posts_for arg: guardian } <= [ filter_allowed_categories: (ActiveRecord_Relation<JoinTable<Post, (Topic or User or GroupMention or Category)>>) -> { { Group#mentioned_posts_for arg: guardian }#filter_allowed_categories ret: ret } ]
About to add lower bound nil <= { Group#mentioned_posts_for arg: opts }
About to add lower bound ({  } or { Group#mentioned_posts_for arg: opts }) <= { Group#mentioned_posts_for arg: opts }
HERE 2
HERE 2a
HERE 2
HERE 2a
About to add upper bound { Group#mentioned_posts_for arg: opts } <= [ []: (:category_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ]
HERE 2
HERE 2a
About to add upper bound { Group#mentioned_posts_for arg: opts } <= [ []: (:before_post_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ]
HERE 2
HERE 2a
About to add lower bound { { { Group#mentioned_posts_for arg: guardian }#filter_allowed_categories ret: ret }#order ret: ret } <= { Group#mentioned_posts_for ret: ret }
About to add lower bound { { { { Group#mentioned_posts_for arg: guardian }#filter_allowed_categories ret: ret }#where ret: ret }#order ret: ret } <= { Group#mentioned_posts_for ret: ret }
Resolving constraints from [s]Group and trust_group_ids
About to add lower bound Array<Integer> <= { [s]Group#trust_group_ids ret: ret }
About to add lower bound Integer <= { { [s]Group#trust_group_ids ret: ret }#keep_if block_arg: id }
About to add lower bound (false or true) <= { { { [s]Group#trust_group_ids ret: ret }#keep_if block_arg: id }#== ret: ret }
HERE 2
HERE 2a
About to add upper bound { { [s]Group#trust_group_ids ret: ret }#keep_if block_ret: block_ret } <= (false or true)
HERE 2
HERE 2a
About to add upper bound { { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret }#>= ret: ret } <= (false or true)
HERE 2
HERE 2a
About to add upper bound { { { [s]Group#trust_group_ids ret: ret }#keep_if block_arg: id }#== ret: ret } <= (false or true)
About to add lower bound Array<Integer> <= { { [s]Group#trust_group_ids ret: ret }#keep_if ret: ret }
About to add lower bound Array<Integer> <= { [s]Group#desired_trust_level_groups ret: ret }
About to add lower bound Integer <= { { [s]Group#desired_trust_level_groups ret: ret }#each block_arg: id }
About to add lower bound Array<Integer> <= { { [s]Group#desired_trust_level_groups ret: ret }#each ret: ret }
About to add lower bound Array<Integer> <= { [s]Group#user_trust_level_change! ret: ret }
HERE 2
HERE 2a
About to add upper bound { [s]Group#desired_trust_level_groups ret: ret } <= Array<u>
About to add upper bound { { [s]Group#trust_group_ids ret: ret }#keep_if ret: ret } <= Array<u>
About to add lower bound Array<Integer> <= { { [s]Group#trust_group_ids ret: ret }#- ret: ret }
About to add upper bound { [s]Group#trust_group_ids ret: ret } <= [ keep_if: () {({ { [s]Group#trust_group_ids ret: ret }#keep_if block_arg: id }) -> { { [s]Group#trust_group_ids ret: ret }#keep_if block_ret: block_ret }} -> { { [s]Group#trust_group_ids ret: ret }#keep_if ret: ret } ]
HERE 2
HERE 2a
About to add upper bound { [s]Group#trust_group_ids ret: ret } <= [ -: ({ [s]Group#desired_trust_level_groups ret: ret }) -> { { [s]Group#trust_group_ids ret: ret }#- ret: ret } ]
HERE 2
HERE 2a
Resolving constraints from [s]Group and desired_trust_level_groups
About to add lower bound { [s]Group#user_trust_level_change! arg: trust_level } <= { [s]Group#desired_trust_level_groups arg: trust_level }
HERE 2
HERE 2a
About to add upper bound { [s]Group#user_trust_level_change! arg: trust_level } <= [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ]
About to add upper bound { [s]Group#desired_trust_level_groups arg: trust_level } <= [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ]
About to add upper bound { [s]Group#user_trust_level_change! arg: trust_level } <= [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ]
About to add lower bound { { [s]Group#trust_group_ids ret: ret }#keep_if ret: ret } <= { [s]Group#desired_trust_level_groups ret: ret }
HERE 2
HERE 2a
About to add upper bound { { [s]Group#trust_group_ids ret: ret }#keep_if ret: ret } <= [ each: () {({ { [s]Group#desired_trust_level_groups ret: ret }#each block_arg: id }) -> { { [s]Group#desired_trust_level_groups ret: ret }#each block_ret: block_ret }} -> { { [s]Group#desired_trust_level_groups ret: ret }#each ret: ret } ]
HERE 2
HERE 2a
About to add lower bound Array<Integer> <= { [s]Group#desired_trust_level_groups ret: ret }
About to add upper bound { [s]Group#desired_trust_level_groups ret: ret } <= [ each: () {({ { [s]Group#desired_trust_level_groups ret: ret }#each block_arg: id }) -> { { [s]Group#desired_trust_level_groups ret: ret }#each block_ret: block_ret }} -> { { [s]Group#desired_trust_level_groups ret: ret }#each ret: ret } ]
About to add upper bound { { [s]Group#trust_group_ids ret: ret }#keep_if ret: ret } <= [ each: () {({ { [s]Group#desired_trust_level_groups ret: ret }#each block_arg: id }) -> { { [s]Group#desired_trust_level_groups ret: ret }#each block_ret: block_ret }} -> { { [s]Group#desired_trust_level_groups ret: ret }#each ret: ret } ]
About to add upper bound { [s]Group#desired_trust_level_groups ret: ret } <= Array<u>
About to add upper bound { { [s]Group#trust_group_ids ret: ret }#keep_if ret: ret } <= Array<u>
Resolving constraints from [s]Group and user_trust_level_change!
About to add upper bound { [s]Group#user_trust_level_change! arg: user_id } <= (Array<Integer> or Integer)
About to add upper bound { [s]Group#user_trust_level_change! arg: user_id } <= Integer
About to add upper bound { [s]Group#user_trust_level_change! arg: trust_level } <= { [s]Group#desired_trust_level_groups arg: trust_level }
About to add upper bound { [s]Group#user_trust_level_change! arg: trust_level } <= [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ]
About to add lower bound { { [s]Group#desired_trust_level_groups ret: ret }#each ret: ret } <= { [s]Group#user_trust_level_change! ret: ret }
About to add lower bound Array<Integer> <= { [s]Group#user_trust_level_change! ret: ret }
Resolving constraints from [s]Group and refresh_automatic_group!
About to add lower bound :trust_level_3 <= { [s]Group#refresh_automatic_group! arg: name }
About to add lower bound :trust_level_3 <= { [s]Group#lookup_group arg: name }
About to add lower bound String <= { { [s]Group#refresh_automatic_group! arg: name }#to_s ret: ret }
About to add lower bound :trust_level_4 <= { [s]Group#refresh_automatic_group! arg: name }
About to add lower bound :trust_level_4 <= { [s]Group#lookup_group arg: name }
About to add lower bound :moderators <= { [s]Group#refresh_automatic_group! arg: name }
About to add lower bound :moderators <= { [s]Group#lookup_group arg: name }
About to add lower bound :staff <= { [s]Group#refresh_automatic_group! arg: name }
About to add lower bound :staff <= { [s]Group#lookup_group arg: name }
About to add lower bound :trust_level_1 <= { [s]Group#refresh_automatic_group! arg: name }
About to add lower bound :trust_level_1 <= { [s]Group#lookup_group arg: name }
About to add lower bound :trust_level_2 <= { [s]Group#refresh_automatic_group! arg: name }
About to add lower bound :trust_level_2 <= { [s]Group#lookup_group arg: name }
About to add lower bound :everyone <= { [s]Group#refresh_automatic_group! arg: name }
About to add lower bound :everyone <= { [s]Group#lookup_group arg: name }
About to add lower bound :admins <= { [s]Group#refresh_automatic_group! arg: name }
About to add lower bound :admins <= { [s]Group#lookup_group arg: name }
About to add lower bound :trust_level_0 <= { [s]Group#refresh_automatic_group! arg: name }
About to add lower bound :trust_level_0 <= { [s]Group#lookup_group arg: name }
About to add upper bound { [s]Group#refresh_automatic_group! arg: name } <= { [s]Group#lookup_group arg: name }
About to add upper bound { [s]Group#refresh_automatic_group! arg: name } <= [ to_s: () -> { { [s]Group#refresh_automatic_group! arg: name }#to_s ret: ret } ]
About to add lower bound nil <= { [s]Group#refresh_automatic_group! ret: ret }
About to add lower bound ({ [s]Group#lookup_group ret: ret } or Group) <= { [s]Group#refresh_automatic_group! ret: ret }
About to add lower bound { [s]Group#lookup_group ret: ret } <= { [s]Group#refresh_automatic_group! ret: ret }
About to add lower bound Group <= { [s]Group#refresh_automatic_group! ret: ret }
Resolving constraints from [s]Group and lookup_group
About to add lower bound { [s]Group#refresh_automatic_group! arg: name } <= { [s]Group#lookup_group arg: name }
HERE 2
HERE 2a
About to add upper bound { [s]Group#refresh_automatic_group! arg: name } <= (Symbol or String)
About to add lower bound :trust_level_3 <= { [s]Group#lookup_group arg: name }
About to add lower bound :trust_level_4 <= { [s]Group#lookup_group arg: name }
About to add lower bound :moderators <= { [s]Group#lookup_group arg: name }
About to add lower bound :staff <= { [s]Group#lookup_group arg: name }
About to add lower bound :trust_level_1 <= { [s]Group#lookup_group arg: name }
About to add lower bound :trust_level_2 <= { [s]Group#lookup_group arg: name }
About to add lower bound :everyone <= { [s]Group#lookup_group arg: name }
About to add lower bound :admins <= { [s]Group#lookup_group arg: name }
About to add lower bound :trust_level_0 <= { [s]Group#lookup_group arg: name }
About to add upper bound { [s]Group#lookup_group arg: name } <= (Symbol or String)
About to add upper bound { [s]Group#refresh_automatic_group! arg: name } <= (Symbol or String)
About to add lower bound Group <= { [s]Group#lookup_group ret: ret }
HERE 2
HERE 2a
About to add lower bound String <= { { [s]Group#lookup_group ret: ret }#name= ret: ret }
HERE 2
HERE 2a
About to add lower bound Integer <= { { [s]Group#lookup_group ret: ret }#visibility_level= ret: ret }
About to add lower bound (false or true) <= { { [s]Group#lookup_group ret: ret }#save! ret: ret }
About to add lower bound (false or true) <= { { [s]Group#lookup_group ret: ret }#update! ret: ret }
About to add lower bound Integer <= { { [s]Group#lookup_group ret: ret }#visibility_level ret: ret }
HERE 2
HERE 2a
About to add lower bound (false or true) <= { { { [s]Group#lookup_group ret: ret }#visibility_level ret: ret }#== ret: ret }
HERE 2
HERE 2a
About to add lower bound (false or true) <= { { [s]Group#lookup_group ret: ret }#update! ret: ret }
About to add lower bound Integer <= { { [s]Group#lookup_group ret: ret }#id ret: ret }
About to add lower bound Group <= { [s]Group#refresh_automatic_group! ret: ret }
About to add upper bound { [s]Group#lookup_group ret: ret } <= [ name=: ({ [s]User#normalize_username ret: ret }) -> { { [s]Group#lookup_group ret: ret }#name= ret: ret } ]
HERE 2
HERE 2a
About to add upper bound { [s]Group#lookup_group ret: ret } <= [ visibility_level=: ({ { [s]Group#visibility_levels ret: ret }#[] ret: ret }) -> { { [s]Group#lookup_group ret: ret }#visibility_level= ret: ret } ]
HERE 2
HERE 2a
About to add upper bound { [s]Group#lookup_group ret: ret } <= [ save!: () -> { { [s]Group#lookup_group ret: ret }#save! ret: ret } ]
About to add upper bound { [s]Group#lookup_group ret: ret } <= [ update!: ({ messageable_level: 99 }) -> { { [s]Group#lookup_group ret: ret }#update! ret: ret } ]
About to add upper bound { [s]Group#lookup_group ret: ret } <= [ visibility_level: () -> { { [s]Group#lookup_group ret: ret }#visibility_level ret: ret } ]
About to add upper bound { [s]Group#lookup_group ret: ret } <= [ update!: ({ visibility_level: { { [s]Group#visibility_levels ret: ret }#[] ret: ret } }) -> { { [s]Group#lookup_group ret: ret }#update! ret: ret } ]
HERE 2
HERE 2a
About to add upper bound { [s]Group#lookup_group ret: ret } <= [ id: () -> { { [s]Group#lookup_group ret: ret }#id ret: ret } ]
About to add upper bound { [s]Group#lookup_group ret: ret } <= { [s]Group#refresh_automatic_group! ret: ret }
Resolving constraints from [s]Draft and find_draft
About to add upper bound { [s]Draft#find_draft arg: user } <= [ is_a?: ([s]User) -> { { [s]Draft#find_draft arg: user }#is_a? ret: ret } ]
About to add upper bound { [s]Draft#find_draft arg: user } <= [ id: () -> { { [s]Draft#find_draft arg: user }#id ret: ret } ]
About to add upper bound { [s]Draft#find_draft arg: user } <= Integer
About to add upper bound { [s]Draft#find_draft arg: key } <= (Symbol or String)
About to add lower bound Draft <= { [s]Draft#find_draft ret: ret }
Resolving constraints from Topic and update_action_counts
About to add lower bound false <= { Topic#update_action_counts ret: ret }
About to add lower bound true <= { Topic#update_action_counts ret: ret }
Resolving constraints from Topic and has_topic_embed?
About to add lower bound false <= { Topic#has_topic_embed? ret: ret }
About to add lower bound false <= { Topic#expandable_first_post? ret: ret }
About to add lower bound true <= { Topic#has_topic_embed? ret: ret }
About to add lower bound true <= { Topic#expandable_first_post? ret: ret }
About to add upper bound { Topic#has_topic_embed? ret: ret } <= { Topic#expandable_first_post? ret: ret }
Resolving constraints from Topic and expandable_first_post?
About to add lower bound false <= { Topic#expandable_first_post? ret: ret }
About to add lower bound true <= { Topic#expandable_first_post? ret: ret }
About to add lower bound { Topic#has_topic_embed? ret: ret } <= { Topic#expandable_first_post? ret: ret }
Resolving constraints from [s]Notification and remove_for
About to add upper bound { [s]Notification#remove_for arg: user_id } <= (Integer or Array<Integer>)
About to add upper bound { [s]Notification#remove_for arg: topic_id } <= (Integer or Array<Integer>)
About to add lower bound Integer <= { [s]Notification#remove_for ret: ret }
Resolving constraints from Notification and post
About to add lower bound nil <= { Notification#post ret: ret }
About to add lower bound Post <= { Notification#post ret: ret }
Resolving constraints from [s]Badge and trust_level_badge_ids
About to add lower bound Array<Integer> <= { [s]Badge#trust_level_badge_ids ret: ret }
Resolving constraints from [s]User and reserved_username?
About to add lower bound { [s]User#normalize_username ret: ret } <= { [s]User#reserved_username? arg: username }
About to add lower bound { [s]User#normalize_username ret: ret } <= { [s]User#normalize_username arg: username }
HERE 2
HERE 2a
About to add upper bound { [s]User#normalize_username ret: ret } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
HERE 2
HERE 2a
About to add upper bound { [s]User#normalize_username ret: ret } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
HERE 2
HERE 2a
About to add upper bound { [s]User#normalize_username ret: ret } <= [ match?: (Regexp) -> { { [s]User#reserved_username? arg: username }#match? ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ match?: (Regexp) -> { { [s]User#reserved_username? arg: username }#match? ret: ret } ]
About to add upper bound { [s]User#reserved_username? arg: username } <= { [s]User#normalize_username arg: username }
About to add upper bound { [s]User#normalize_username ret: ret } <= { [s]User#normalize_username arg: username }
About to add lower bound nil <= { [s]User#normalize_username arg: username }
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= { [s]User#normalize_username arg: username }
About to add upper bound { [s]User#reserved_username? arg: username } <= [ match?: (Regexp) -> { { [s]User#reserved_username? arg: username }#match? ret: ret } ]
About to add upper bound { [s]User#normalize_username ret: ret } <= [ match?: (Regexp) -> { { [s]User#reserved_username? arg: username }#match? ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ match?: (Regexp) -> { { [s]User#reserved_username? arg: username }#match? ret: ret } ]
About to add lower bound { { { { [s]SiteSetting#reserved_usernames ret: ret }#unicode_normalize ret: ret }#split ret: ret }#any? ret: ret } <= { [s]User#reserved_username? ret: ret }
Resolving constraints from [s]EmailToken and valid_after
About to add lower bound { { { [s]SiteSetting#email_token_valid_hours ret: ret }#hours ret: ret }#ago ret: ret } <= { [s]EmailToken#valid_after ret: ret }
Resolving constraints from [s]EmailToken and confirm
About to add lower bound String <= { [s]EmailToken#confirm arg: token }
About to add lower bound String <= { [s]EmailToken#atomic_confirm arg: token }
About to add upper bound { [s]EmailToken#confirm arg: token } <= { [s]EmailToken#atomic_confirm arg: token }
About to add lower bound true <= { [s]EmailToken#confirm arg: skip_reviewable }
About to add lower bound false <= { [s]EmailToken#confirm arg: skip_reviewable }
About to add lower bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#reload ret: ret } <= { [s]EmailToken#confirm ret: ret }
About to add lower bound nil <= { [s]EmailToken#confirm ret: ret }
About to add lower bound { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret } <= { [s]EmailToken#confirm ret: ret }
Resolving constraints from [s]EmailToken and confirmable
About to add upper bound { [s]EmailToken#confirmable arg: token } <= (Symbol or String or Array<(Symbol or String)>)
About to add lower bound EmailToken <= { [s]EmailToken#confirmable ret: ret }
Resolving constraints from [s]Invite and redeem_from_email
About to add lower bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= { [s]Invite#redeem_from_email arg: email }
About to add lower bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= { [s]Email#downcase arg: email }
About to add lower bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= { [s]Email#is_valid? arg: email }
About to add lower bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= { [s]Email#downcase ret: ret }
HERE 2
HERE 2a
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
HERE 2
HERE 2a
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= [ downcase: () -> { { [s]Email#downcase arg: email }#downcase ret: ret } ]
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= { [s]Email#downcase arg: email }
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= { [s]Email#downcase arg: email }
About to add lower bound Invite <= { [s]Invite#redeem_from_email ret: ret }
About to add lower bound (false or true) <= { { [s]Invite#redeem_from_email ret: ret }#present? ret: ret }
About to add upper bound { [s]Invite#redeem_from_email ret: ret } <= [ present?: () -> { { [s]Invite#redeem_from_email ret: ret }#present? ret: ret } ]
Resolving constraints from [s]Email and downcase
About to add lower bound { [s]Invite#redeem_from_email arg: email } <= { [s]Email#downcase arg: email }
About to add lower bound { [s]Invite#redeem_from_email arg: email } <= { [s]Email#is_valid? arg: email }
About to add lower bound { [s]Invite#redeem_from_email arg: email } <= { [s]Email#downcase ret: ret }
HERE 2
HERE 2a
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
HERE 2
HERE 2a
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= [ downcase: () -> { { [s]Email#downcase arg: email }#downcase ret: ret } ]
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= [ downcase: () -> { { [s]Email#downcase arg: email }#downcase ret: ret } ]
About to add lower bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= { [s]Email#downcase arg: email }
About to add lower bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= { [s]Email#is_valid? arg: email }
About to add lower bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= { [s]Email#downcase ret: ret }
HERE 2
HERE 2a
HERE 2
HERE 2a
About to add upper bound { [s]Email#downcase arg: email } <= { [s]Email#is_valid? arg: email }
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= { [s]Email#is_valid? arg: email }
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= { [s]Email#is_valid? arg: email }
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= { [s]Email#is_valid? arg: email }
About to add upper bound { [s]Email#downcase arg: email } <= { [s]Email#downcase ret: ret }
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= { [s]Email#downcase ret: ret }
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= { [s]Email#downcase ret: ret }
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= { [s]Email#downcase ret: ret }
About to add upper bound { [s]Email#downcase arg: email } <= [ downcase: () -> { { [s]Email#downcase arg: email }#downcase ret: ret } ]
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= [ downcase: () -> { { [s]Email#downcase arg: email }#downcase ret: ret } ]
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= [ downcase: () -> { { [s]Email#downcase arg: email }#downcase ret: ret } ]
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= [ downcase: () -> { { [s]Email#downcase arg: email }#downcase ret: ret } ]
About to add lower bound { [s]Email#downcase arg: email } <= { [s]Email#downcase ret: ret }
HERE 2
HERE 2a
About to add upper bound { [s]Email#downcase arg: email } <= (Symbol or String)
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add lower bound { { [s]Email#downcase arg: email }#downcase ret: ret } <= { [s]Email#downcase ret: ret }
HERE 2
HERE 2a
About to add upper bound { { [s]Email#downcase arg: email }#downcase ret: ret } <= (Symbol or String)
About to add lower bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= { [s]Email#downcase ret: ret }
HERE 2
HERE 2a
About to add lower bound { [s]Invite#redeem_from_email arg: email } <= { [s]Email#downcase ret: ret }
HERE 2
HERE 2a
About to add upper bound { [s]Email#downcase ret: ret } <= (Symbol or String)
About to add upper bound { [s]Email#downcase arg: email } <= (Symbol or String)
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add upper bound { { [s]Email#downcase arg: email }#downcase ret: ret } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
Resolving constraints from [s]Email and is_valid?
About to add lower bound { [s]Email#downcase arg: email } <= { [s]Email#is_valid? arg: email }
About to add lower bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= { [s]Email#is_valid? arg: email }
About to add lower bound { [s]Invite#redeem_from_email arg: email } <= { [s]Email#is_valid? arg: email }
About to add lower bound false <= { [s]Email#is_valid? ret: ret }
About to add lower bound { { { { [s]EmailValidator#email_regex ret: ret }#=~ ret: ret }#! ret: ret }#! ret: ret } <= { [s]Email#is_valid? ret: ret }
Resolving constraints from [s]PostActionType and notify_flag_type_ids
About to add lower bound { { [s]PostActionType#notify_flag_types ret: ret }#values ret: ret } <= { [s]PostActionType#notify_flag_type_ids ret: ret }
HERE 2
HERE 2a
About to add upper bound { { [s]PostActionType#notify_flag_types ret: ret }#values ret: ret } <= (Integer or Array<Integer>)
About to add upper bound { [s]PostActionType#notify_flag_type_ids ret: ret } <= (Integer or Array<Integer>)
About to add upper bound { { [s]PostActionType#notify_flag_types ret: ret }#values ret: ret } <= (Integer or Array<Integer>)
Resolving constraints from [s]PostActionType and notify_flag_types
About to add lower bound { { [s]PostActionType#flag_settings ret: ret }#notify_types ret: ret } <= { [s]PostActionType#notify_flag_types ret: ret }
HERE 2
HERE 2a
About to add upper bound { { [s]PostActionType#flag_settings ret: ret }#notify_types ret: ret } <= [ values: () -> { { [s]PostActionType#notify_flag_types ret: ret }#values ret: ret } ]
About to add upper bound { [s]PostActionType#notify_flag_types ret: ret } <= [ values: () -> { { [s]PostActionType#notify_flag_types ret: ret }#values ret: ret } ]
About to add upper bound { { [s]PostActionType#flag_settings ret: ret }#notify_types ret: ret } <= [ values: () -> { { [s]PostActionType#notify_flag_types ret: ret }#values ret: ret } ]
Resolving constraints from [s]PostActionType and flag_settings
About to add lower bound { PostActionType# var: @flag_settings } <= { [s]PostActionType#flag_settings ret: ret }
HERE 2
HERE 2a
About to add upper bound { PostActionType# var: @flag_settings } <= [ notify_types: () -> { { [s]PostActionType#flag_settings ret: ret }#notify_types ret: ret } ]
About to add lower bound FlagSettings <= { [s]PostActionType#flag_settings ret: ret }
About to add upper bound { [s]PostActionType#flag_settings ret: ret } <= [ notify_types: () -> { { [s]PostActionType#flag_settings ret: ret }#notify_types ret: ret } ]
About to add upper bound { PostActionType# var: @flag_settings } <= [ notify_types: () -> { { [s]PostActionType#flag_settings ret: ret }#notify_types ret: ret } ]
Resolving constraints from User and new_user_posting_on_first_day?
About to add lower bound false <= { User#new_user_posting_on_first_day? ret: ret }
About to add lower bound true <= { User#new_user_posting_on_first_day? ret: ret }
About to add lower bound { { User#first_post_created_at ret: ret }#nil? ret: ret } <= { User#new_user_posting_on_first_day? ret: ret }
About to add lower bound { { User#first_post_created_at ret: ret }#>= ret: ret } <= { User#new_user_posting_on_first_day? ret: ret }
Resolving constraints from User and first_post_created_at
About to add lower bound DateTime <= { User#first_post_created_at ret: ret }
About to add lower bound (false or true) <= { { User#first_post_created_at ret: ret }#nil? ret: ret }
About to add lower bound (false or true) <= { User#new_user_posting_on_first_day? ret: ret }
About to add lower bound Time <= { User#first_post_created_at ret: ret }
About to add upper bound { User#first_post_created_at ret: ret } <= [ nil?: () -> { { User#first_post_created_at ret: ret }#nil? ret: ret } ]
About to add upper bound { User#first_post_created_at ret: ret } <= [ >=: ({ { Integer#hours ret: ret }#ago ret: ret }) -> { { User#first_post_created_at ret: ret }#>= ret: ret } ]
Resolving constraints from RateLimiter and initialize
About to add lower bound User <= { RateLimiter#initialize arg: user }
About to add lower bound User <= { RateLimiter# var: @user }
About to add upper bound { RateLimiter#initialize arg: user } <= { RateLimiter# var: @user }
About to add lower bound 'first-day-replies-per-day' <= { RateLimiter#initialize arg: type }
About to add lower bound 'first-day-replies-per-day' <= { RateLimiter# var: @type }
About to add lower bound 'first-day-replies-per-day' <= { RateLimiter#build_key arg: type }
About to add upper bound { RateLimiter#initialize arg: type } <= { RateLimiter# var: @type }
About to add upper bound { RateLimiter#initialize arg: type } <= { RateLimiter#build_key arg: type }
About to add lower bound Integer <= { RateLimiter#initialize arg: max }
About to add lower bound Integer <= { RateLimiter# var: @max }
About to add upper bound { RateLimiter#initialize arg: max } <= { RateLimiter# var: @max }
About to add lower bound Integer <= { RateLimiter#initialize arg: secs }
About to add lower bound Integer <= { RateLimiter# var: @secs }
About to add upper bound { RateLimiter#initialize arg: secs } <= { RateLimiter# var: @secs }
About to add lower bound false <= { RateLimiter#initialize arg: global }
About to add lower bound false <= { RateLimiter# var: @global }
About to add upper bound { RateLimiter#initialize arg: global } <= { RateLimiter# var: @global }
Resolving constraints from UsernameValidator and initialize
About to add lower bound { [s]User#normalize_username ret: ret } <= { UsernameValidator#initialize arg: username }
HERE 2
HERE 2a
About to add upper bound { [s]User#normalize_username ret: ret } <= [ unicode_normalize: () -> { { UsernameValidator#initialize arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ unicode_normalize: () -> { { UsernameValidator#initialize arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { UsernameValidator#initialize arg: username } <= [ unicode_normalize: () -> { { UsernameValidator#initialize arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { [s]User#normalize_username ret: ret } <= [ unicode_normalize: () -> { { UsernameValidator#initialize arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ unicode_normalize: () -> { { UsernameValidator#initialize arg: username }#unicode_normalize ret: ret } ]
Resolving constraints from UsernameValidator and valid_format?
About to add lower bound { { UsernameValidator#errors ret: ret }#empty? ret: ret } <= { UsernameValidator#valid_format? ret: ret }
Resolving constraints from UsernameValidator and username_length_min?
About to add lower bound nil <= { UsernameValidator#username_length_min? ret: ret }
About to add lower bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_length_min? ret: ret }
Resolving constraints from UsernameValidator and username_length_max?
About to add lower bound nil <= { UsernameValidator#username_length_max? ret: ret }
About to add lower bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_length_max? ret: ret }
Resolving constraints from UsernameValidator and username_char_valid?
About to add lower bound nil <= { UsernameValidator#username_char_valid? ret: ret }
About to add lower bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_char_valid? ret: ret }
Resolving constraints from UsernameValidator and username_char_whitelisted?
About to add lower bound nil <= { UsernameValidator#username_char_whitelisted? ret: ret }
About to add lower bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_char_whitelisted? ret: ret }
Resolving constraints from UsernameValidator and username_first_char_valid?
About to add lower bound nil <= { UsernameValidator#username_first_char_valid? ret: ret }
About to add lower bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_first_char_valid? ret: ret }
Resolving constraints from UsernameValidator and username_last_char_valid?
About to add lower bound nil <= { UsernameValidator#username_last_char_valid? ret: ret }
About to add lower bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_last_char_valid? ret: ret }
Resolving constraints from UsernameValidator and username_no_double_special?
About to add lower bound nil <= { UsernameValidator#username_no_double_special? ret: ret }
About to add lower bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_no_double_special? ret: ret }
Resolving constraints from UsernameValidator and username_does_not_end_with_confusing_suffix?
About to add lower bound nil <= { UsernameValidator#username_does_not_end_with_confusing_suffix? ret: ret }
About to add lower bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= { UsernameValidator#username_does_not_end_with_confusing_suffix? ret: ret }
Resolving constraints from [s]User and normalize_username
About to add lower bound { [s]User#find_by_username arg: username } <= { [s]User#normalize_username arg: username }
HERE 2
HERE 2a
About to add upper bound { [s]User#find_by_username arg: username } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
HERE 2
HERE 2a
About to add upper bound { [s]User#find_by_username arg: username } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add lower bound { [s]User#username_available? arg: username } <= { [s]User#normalize_username arg: username }
HERE 2
HERE 2a
About to add upper bound { [s]User#username_available? arg: username } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
HERE 2
HERE 2a
About to add upper bound { [s]User#username_available? arg: username } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add lower bound { [s]I18n#t ret: ret } <= { [s]User#normalize_username arg: username }
HERE 2
HERE 2a
About to add upper bound { [s]I18n#t ret: ret } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
HERE 2
HERE 2a
About to add upper bound { [s]I18n#t ret: ret } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add lower bound { [s]User#reserved_username? arg: username } <= { [s]User#normalize_username arg: username }
HERE 2
HERE 2a
About to add upper bound { [s]User#reserved_username? arg: username } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { [s]User#normalize_username ret: ret } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
HERE 2
HERE 2a
About to add upper bound { [s]User#reserved_username? arg: username } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { [s]User#normalize_username ret: ret } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add lower bound { [s]User#username_exists? arg: username } <= { [s]User#normalize_username arg: username }
HERE 2
HERE 2a
About to add upper bound { [s]User#username_exists? arg: username } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { [s]User#normalize_username ret: ret } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
HERE 2
HERE 2a
About to add upper bound { [s]User#username_exists? arg: username } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { [s]User#normalize_username ret: ret } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add lower bound { [s]User#normalize_username ret: ret } <= { [s]User#normalize_username arg: username }
HERE 2
HERE 2a
HERE 2
HERE 2a
About to add lower bound nil <= { [s]User#normalize_username arg: username }
About to add upper bound { [s]User#normalize_username arg: username } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { [s]User#find_by_username arg: username } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { [s]User#username_available? arg: username } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { [s]I18n#t ret: ret } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { [s]User#reserved_username? arg: username } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { [s]User#normalize_username ret: ret } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { [s]User#username_exists? arg: username } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { [s]User#normalize_username ret: ret } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { [s]User#normalize_username ret: ret } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { [s]User#normalize_username arg: username } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { [s]User#find_by_username arg: username } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { [s]User#username_available? arg: username } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { [s]I18n#t ret: ret } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { [s]User#reserved_username? arg: username } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { [s]User#normalize_username ret: ret } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { [s]User#username_exists? arg: username } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { [s]User#normalize_username ret: ret } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { [s]User#normalize_username ret: ret } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add lower bound nil <= { [s]User#normalize_username ret: ret }
About to add lower bound nil <= { [s]User#reserved_username? arg: username }
About to add lower bound nil <= { [s]User#normalize_username arg: username }
About to add lower bound nil <= { [s]User#username_exists? arg: username }
About to add lower bound nil <= { [s]User#normalize_username arg: username }
About to add lower bound nil <= { UsernameValidator#initialize arg: username }
About to add lower bound nil <= { [s]User#normalize_username arg: username }
About to add lower bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= { [s]User#normalize_username ret: ret }
HERE 2
HERE 2a
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= (Symbol or String)
About to add lower bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= { [s]User#reserved_username? arg: username }
About to add lower bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= { [s]User#normalize_username arg: username }
HERE 2
HERE 2a
HERE 2
HERE 2a
HERE 2
HERE 2a
HERE 2
HERE 2a
HERE 2
HERE 2a
About to add lower bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= { [s]User#username_exists? arg: username }
About to add lower bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= { [s]User#normalize_username arg: username }
HERE 2
HERE 2a
HERE 2
HERE 2a
HERE 2
HERE 2a
HERE 2
HERE 2a
About to add lower bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= { UsernameValidator#initialize arg: username }
HERE 2
HERE 2a
HERE 2
HERE 2a
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
HERE 2
HERE 2a
HERE 2
HERE 2a
HERE 2
HERE 2a
About to add lower bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= { [s]User#normalize_username arg: username }
HERE 2
HERE 2a
HERE 2
HERE 2a
HERE 2
HERE 2a
About to add upper bound { [s]User#normalize_username ret: ret } <= (Symbol or String)
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= (Symbol or String)
About to add upper bound { [s]User#normalize_username ret: ret } <= { [s]User#reserved_username? arg: username }
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= { [s]User#reserved_username? arg: username }
About to add upper bound { [s]User#normalize_username ret: ret } <= { [s]User#username_exists? arg: username }
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= { [s]User#username_exists? arg: username }
About to add upper bound { [s]User#normalize_username ret: ret } <= { UsernameValidator#initialize arg: username }
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= { UsernameValidator#initialize arg: username }
About to add upper bound { [s]User#normalize_username ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { [s]User#normalize_username ret: ret } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { [s]User#normalize_username ret: ret } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { [s]User#normalize_username ret: ret } <= [ match?: (Regexp) -> { { [s]User#reserved_username? arg: username }#match? ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ match?: (Regexp) -> { { [s]User#reserved_username? arg: username }#match? ret: ret } ]
About to add upper bound { [s]User#normalize_username ret: ret } <= { [s]User#normalize_username arg: username }
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= { [s]User#normalize_username arg: username }
About to add upper bound { [s]User#normalize_username ret: ret } <= [ unicode_normalize: () -> { { UsernameValidator#initialize arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ unicode_normalize: () -> { { UsernameValidator#initialize arg: username }#unicode_normalize ret: ret } ]
Resolving constraints from [s]User and username_exists?
About to add lower bound { [s]User#normalize_username ret: ret } <= { [s]User#username_exists? arg: username }
About to add lower bound { [s]User#normalize_username ret: ret } <= { [s]User#normalize_username arg: username }
HERE 2
HERE 2a
HERE 2
HERE 2a
HERE 2
HERE 2a
HERE 2
HERE 2a
About to add lower bound nil <= { [s]User#username_exists? arg: username }
About to add lower bound nil <= { [s]User#normalize_username arg: username }
About to add lower bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= { [s]User#username_exists? arg: username }
About to add lower bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= { [s]User#normalize_username arg: username }
HERE 2
HERE 2a
HERE 2
HERE 2a
HERE 2
HERE 2a
HERE 2
HERE 2a
About to add upper bound { [s]User#username_exists? arg: username } <= { [s]User#normalize_username arg: username }
About to add upper bound { [s]User#normalize_username ret: ret } <= { [s]User#normalize_username arg: username }
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= { [s]User#normalize_username arg: username }
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= { [s]User#normalize_username arg: username }
About to add upper bound { [s]User#username_exists? arg: username } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { [s]User#normalize_username ret: ret } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ present?: () -> { { [s]User#normalize_username arg: username }#present? ret: ret } ]
About to add upper bound { [s]User#username_exists? arg: username } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { [s]User#normalize_username ret: ret } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= [ unicode_normalize: () -> { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret } ]
About to add lower bound { { MiniSqlMultisiteConnection#exec ret: ret }#> ret: ret } <= { [s]User#username_exists? ret: ret }
HERE 2
HERE 2a
About to add upper bound { { MiniSqlMultisiteConnection#exec ret: ret }#> ret: ret } <= [ !: () -> { { [s]User#username_exists? ret: ret }#! ret: ret } ]
About to add upper bound { [s]User#username_exists? ret: ret } <= [ !: () -> { { [s]User#username_exists? ret: ret }#! ret: ret } ]
About to add upper bound { { MiniSqlMultisiteConnection#exec ret: ret }#> ret: ret } <= [ !: () -> { { [s]User#username_exists? ret: ret }#! ret: ret } ]
Resolving constraints from User and create_reviewable
About to add lower bound nil <= { User#create_reviewable ret: ret }
About to add lower bound nil <= { User#activate ret: ret }
About to add lower bound { [s]Jobs#enqueue ret: ret } <= { User#create_reviewable ret: ret }
About to add lower bound { [s]Jobs#enqueue ret: ret } <= { User#activate ret: ret }
About to add upper bound { User#create_reviewable ret: ret } <= { User#activate ret: ret }
About to add upper bound { [s]Jobs#enqueue ret: ret } <= { User#activate ret: ret }


Running solution extraction...
About to add upper bound { PostActionType# var: @flag_settings } <= FlagSettings
About to add lower bound FlagSettings <= { PostActionType# var: @flag_settings }
About to add lower bound FlagSettings <= { [s]PostActionType#flag_settings ret: ret }
Extracted solution for { PostActionType# var: @flag_settings } is FlagSettings.
About to add upper bound { RateLimiter# var: @user } <= User
About to add upper bound { RateLimiter#initialize arg: user } <= User
About to add lower bound User <= { RateLimiter# var: @user }
Extracted solution for { RateLimiter# var: @user } is User.
About to add upper bound { RateLimiter# var: @type } <= 'first-day-replies-per-day'
About to add upper bound { RateLimiter#initialize arg: type } <= 'first-day-replies-per-day'
About to add lower bound 'first-day-replies-per-day' <= { RateLimiter# var: @type }
Extracted solution for { RateLimiter# var: @type } is 'first-day-replies-per-day'.
Extracted solution for { RateLimiter# var: @key } is { RateLimiter# var: @key }.
About to add upper bound { RateLimiter# var: @max } <= Integer
About to add upper bound { RateLimiter#initialize arg: max } <= Integer
About to add lower bound Integer <= { RateLimiter# var: @max }
Extracted solution for { RateLimiter# var: @max } is Integer.
About to add upper bound { RateLimiter# var: @secs } <= Integer
About to add upper bound { RateLimiter#initialize arg: secs } <= Integer
About to add lower bound Integer <= { RateLimiter# var: @secs }
Extracted solution for { RateLimiter# var: @secs } is Integer.
About to add upper bound { RateLimiter# var: @global } <= false
About to add upper bound { RateLimiter#initialize arg: global } <= false
About to add lower bound false <= { RateLimiter# var: @global }
Extracted solution for { RateLimiter# var: @global } is false.
Extracted solution for { UsernameValidator# var: @username } is { UsernameValidator# var: @username }.
About to add upper bound { UsernameValidator# var: @errors } <= []
About to add lower bound [] <= { UsernameValidator# var: @errors }
Extracted solution for { UsernameValidator# var: @errors } is [].
About to add upper bound { { [s]User#new_from_params arg: params }#[] ret: ret } <= String
About to add lower bound String <= { { [s]User#new_from_params arg: params }#[] ret: ret }
About to add upper bound { { [s]User#new_from_params arg: params }#[] ret: ret } <= String
About to add lower bound String <= { { [s]User#new_from_params arg: params }#[] ret: ret }
About to add upper bound { { [s]User#new_from_params arg: params }#[] ret: ret } <= String
About to add lower bound String <= { { [s]User#new_from_params arg: params }#[] ret: ret }
About to add upper bound { [s]User#new_from_params arg: params } <= { name: String, email: String, password: { { [s]User#new_from_params arg: params }#[] ret: ret }, username: String }
About to add lower bound { name: String, email: String, password: { { [s]User#new_from_params arg: params }#[] ret: ret }, username: String } <= { [s]User#new_from_params arg: params }
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
About to add upper bound { [s]User#new_from_params ret: ret } <= User
About to add lower bound User <= { [s]User#new_from_params ret: ret }
Extracted solution for [s]User#new_from_params is ({ name: String, email: String, password: { { [s]User#new_from_params arg: params }#[] ret: ret }, username: String }) -> User
About to add upper bound { [s]User#find_by_username arg: username } <= String
About to add lower bound String <= { [s]User#find_by_username arg: username }
About to add lower bound String <= { [s]User#normalize_username arg: username }
About to add lower bound (false or true) <= { { [s]User#normalize_username arg: username }#present? ret: ret }
About to add upper bound { [s]User#find_by_username ret: ret } <= User
About to add lower bound User <= { [s]User#find_by_username ret: ret }
Extracted solution for [s]User#find_by_username is (String) -> User
About to add upper bound { [s]User#username_available? arg: username } <= String
About to add lower bound String <= { [s]User#username_available? arg: username }
About to add lower bound String <= { [s]User#normalize_username arg: username }
About to add upper bound { [s]User#username_available? arg: email } <= [ present?: () -> { { [s]User#username_available? arg: email }#present? ret: ret } ]
About to add lower bound [ present?: () -> { { [s]User#username_available? arg: email }#present? ret: ret } ] <= { [s]User#username_available? arg: email }
HERE 1
HERE 1a
false AND true
About to add upper bound { [s]User#username_available? arg: allow_reserved_username } <= [ !: () -> { { [s]User#username_available? arg: allow_reserved_username }#! ret: ret } ]
About to add lower bound [ !: () -> { { [s]User#username_available? arg: allow_reserved_username }#! ret: ret } ] <= { [s]User#username_available? arg: allow_reserved_username }
HERE 1
HERE 1a
false AND true
About to add upper bound { [s]User#username_available? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { [s]User#username_available? ret: ret }
Extracted solution for [s]User#username_available? is (String,?[ present?: () -> { { [s]User#username_available? arg: email }#present? ret: ret } ],{ allow_reserved_username: ?[ !: () -> { { [s]User#username_available? arg: allow_reserved_username }#! ret: ret } ] }) -> (false or true)
About to add upper bound { User#featured_user_badges arg: limit } <= Integer
About to add lower bound Integer <= { User#featured_user_badges arg: limit }
About to add upper bound { User#featured_user_badges ret: ret } <= Array<(Topic or User or Post or UserBadge or Badge or BadgeType or GrantedBy)>
About to add lower bound Array<(Topic or User or Post or UserBadge or Badge or BadgeType or GrantedBy)> <= { User#featured_user_badges ret: ret }
Extracted solution for User#featured_user_badges is (?Integer) -> Array<(Topic or User or Post or UserBadge or Badge or BadgeType or GrantedBy)>
About to add upper bound { User#email_confirmed? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { User#email_confirmed? ret: ret }
Extracted solution for User#email_confirmed? is () -> (false or true)
About to add upper bound { User#activate ret: ret } <= nil
About to add upper bound { User#create_reviewable ret: ret } <= nil
About to add upper bound { [s]Jobs#enqueue ret: ret } <= nil
About to add upper bound { [s]Jobs#enqueue ret: ret } <= nil
About to add lower bound nil <= { User#activate ret: ret }
Extracted solution for User#activate is () -> nil
About to add upper bound { User#number_of_deleted_posts ret: ret } <= Integer
About to add lower bound Integer <= { User#number_of_deleted_posts ret: ret }
Extracted solution for User#number_of_deleted_posts is () -> Integer
About to add upper bound { User#number_of_flags_given ret: ret } <= Integer
About to add lower bound Integer <= { User#number_of_flags_given ret: ret }
Extracted solution for User#number_of_flags_given is () -> Integer
About to add upper bound { User#create_user_profile ret: ret } <= UserProfile
About to add lower bound UserProfile <= { User#create_user_profile ret: ret }
Extracted solution for User#create_user_profile is () -> UserProfile
About to add upper bound { User#create_user_option ret: ret } <= UserOption
About to add lower bound UserOption <= { User#create_user_option ret: ret }
Extracted solution for User#create_user_option is () -> UserOption
About to add upper bound { User#create_email_token ret: ret } <= EmailToken
About to add lower bound EmailToken <= { User#create_email_token ret: ret }
Extracted solution for User#create_email_token is () -> EmailToken
About to add upper bound { User#update_usernames ret: ret } <= String
About to add lower bound String <= { User#update_usernames ret: ret }
Extracted solution for User#update_usernames is () -> String
About to add upper bound { User#seen_before? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { User#seen_before? ret: ret }
Extracted solution for User#seen_before? is () -> (false or true)
About to add upper bound { [s]EmailToken#active ret: ret } <= ActiveRecord_Relation<EmailToken>
About to add lower bound ActiveRecord_Relation<EmailToken> <= { [s]EmailToken#active ret: ret }
Extracted solution for [s]EmailToken#active is () -> ActiveRecord_Relation<EmailToken>
About to add upper bound { Post#seen? arg: user } <= User
About to add lower bound User <= { Post#seen? arg: user }
About to add lower bound Integer <= { { Post#seen? arg: user }#id ret: ret }
About to add upper bound { Post#seen? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { Post#seen? ret: ret }
Extracted solution for Post#seen? is (User) -> (false or true)
About to add upper bound { [s]Post#find_by_detail arg: key } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Post#find_by_detail arg: key }
About to add upper bound { [s]Post#find_by_detail arg: value } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Post#find_by_detail arg: value }
About to add upper bound { [s]Post#find_by_detail ret: ret } <= Post
About to add lower bound Post <= { [s]Post#find_by_detail ret: ret }
Extracted solution for [s]Post#find_by_detail is ((Symbol or String),(Symbol or String)) -> Post
About to add upper bound { Post#is_flagged? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { Post#is_flagged? ret: ret }
Extracted solution for Post#is_flagged? is () -> (false or true)
About to add upper bound { Post#is_reply_by_email? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { Post#is_reply_by_email? ret: ret }
Extracted solution for Post#is_reply_by_email? is () -> (false or true)
About to add upper bound { Post#add_detail arg: key } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { Post#add_detail arg: key }
About to add upper bound { Post#add_detail arg: value } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { Post#add_detail arg: value }
About to add upper bound { Post#add_detail arg: extra } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { Post#add_detail arg: extra }
About to add upper bound { Post#add_detail ret: ret } <= PostDetail
About to add lower bound PostDetail <= { Post#add_detail ret: ret }
Extracted solution for Post#add_detail is ((Symbol or String),(Symbol or String),?((Symbol or String))) -> PostDetail
About to add upper bound { Post#limit_posts_per_day ret: ret } <= RateLimiter
About to add lower bound RateLimiter <= { Post#limit_posts_per_day ret: ret }
Extracted solution for Post#limit_posts_per_day is () -> RateLimiter
About to add upper bound { [s]Archetype#private_message ret: ret } <= 'private_message'
About to add lower bound 'private_message' <= { [s]Archetype#private_message ret: ret }
Extracted solution for [s]Archetype#private_message is () -> 'private_message'
About to add upper bound { Group#posts_for arg: guardian } <= Guardian
About to add lower bound Guardian <= { Group#posts_for arg: guardian }
About to add upper bound { { Group#posts_for arg: opts }#[] ret: ret } <= [ present?: () -> { { { Group#posts_for arg: opts }#[] ret: ret }#present? ret: ret } ]
About to add lower bound [ present?: () -> { { { Group#posts_for arg: opts }#[] ret: ret }#present? ret: ret } ] <= { { Group#posts_for arg: opts }#[] ret: ret }
HERE 1
HERE 1a
false AND true
About to add upper bound { Group#posts_for arg: opts } <= { category_id: [ present?: () -> { { { Group#posts_for arg: opts }#[] ret: ret }#present? ret: ret } ], before_post_id: { { Group#posts_for arg: opts }#[] ret: ret } }
Attempted to apply rule hash_access to var { Group#posts_for arg: opts }, but go the following error: 
Inconsistent type constraint ({  } or { Group#posts_for arg: opts }) <= { category_id: [ present?: () -> { { { Group#posts_for arg: opts }#[] ret: ret }#present? ret: ret } ], before_post_id: { { Group#posts_for arg: opts }#[] ret: ret } } generated during inference.
 /Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:304:5: note: ({  } or { Group#posts_for arg: opts }) constraint generated here.
/Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:304:     opts ||= {}
/Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:304:     ^~~~~~~~~~~
 
About to add upper bound { Group#posts_for arg: opts } <= ([ []: (:category_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ] and [ []: (:before_post_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ])
HERE 2
HERE 2a
About to add lower bound ([ []: (:category_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ] and [ []: (:before_post_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ]) <= { Group#posts_for arg: opts }
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
Extracted solution for Group#posts_for is (Guardian,?([ []: (:category_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ] and [ []: (:before_post_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ])) -> { Group#posts_for ret: ret }
About to add upper bound { Group#messages_for arg: guardian } <= Guardian
About to add lower bound Guardian <= { Group#messages_for arg: guardian }
About to add upper bound { { Group#messages_for arg: opts }#[] ret: ret } <= [ present?: () -> { { { Group#messages_for arg: opts }#[] ret: ret }#present? ret: ret } ]
About to add lower bound [ present?: () -> { { { Group#messages_for arg: opts }#[] ret: ret }#present? ret: ret } ] <= { { Group#messages_for arg: opts }#[] ret: ret }
HERE 1
HERE 1a
false AND true
About to add upper bound { Group#messages_for arg: opts } <= { category_id: [ present?: () -> { { { Group#messages_for arg: opts }#[] ret: ret }#present? ret: ret } ], before_post_id: { { Group#messages_for arg: opts }#[] ret: ret } }
Attempted to apply rule hash_access to var { Group#messages_for arg: opts }, but go the following error: 
Inconsistent type constraint ({  } or { Group#messages_for arg: opts }) <= { category_id: [ present?: () -> { { { Group#messages_for arg: opts }#[] ret: ret }#present? ret: ret } ], before_post_id: { { Group#messages_for arg: opts }#[] ret: ret } } generated during inference.
 /Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:323:5: note: ({  } or { Group#messages_for arg: opts }) constraint generated here.
/Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:323:     opts ||= {}
/Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:323:     ^~~~~~~~~~~
 
About to add upper bound { Group#messages_for arg: opts } <= ([ []: (:before_post_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ] and [ []: (:category_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ])
HERE 2
HERE 2a
About to add lower bound ([ []: (:before_post_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ] and [ []: (:category_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ]) <= { Group#messages_for arg: opts }
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
Extracted solution for Group#messages_for is (Guardian,?([ []: (:before_post_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ] and [ []: (:category_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ])) -> { Group#messages_for ret: ret }
About to add upper bound { Group#mentioned_posts_for arg: guardian } <= Guardian
About to add lower bound Guardian <= { Group#mentioned_posts_for arg: guardian }
About to add upper bound { { Group#mentioned_posts_for arg: opts }#[] ret: ret } <= [ present?: () -> { { { Group#mentioned_posts_for arg: opts }#[] ret: ret }#present? ret: ret } ]
About to add lower bound [ present?: () -> { { { Group#mentioned_posts_for arg: opts }#[] ret: ret }#present? ret: ret } ] <= { { Group#mentioned_posts_for arg: opts }#[] ret: ret }
HERE 1
HERE 1a
false AND true
About to add upper bound { Group#mentioned_posts_for arg: opts } <= { category_id: [ present?: () -> { { { Group#mentioned_posts_for arg: opts }#[] ret: ret }#present? ret: ret } ], before_post_id: { { Group#mentioned_posts_for arg: opts }#[] ret: ret } }
Attempted to apply rule hash_access to var { Group#mentioned_posts_for arg: opts }, but go the following error: 
Inconsistent type constraint ({  } or { Group#mentioned_posts_for arg: opts }) <= { category_id: [ present?: () -> { { { Group#mentioned_posts_for arg: opts }#[] ret: ret }#present? ret: ret } ], before_post_id: { { Group#mentioned_posts_for arg: opts }#[] ret: ret } } generated during inference.
 /Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:341:5: note: ({  } or { Group#mentioned_posts_for arg: opts }) constraint generated here.
/Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:341:     opts ||= {}
/Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:341:     ^~~~~~~~~~~
 
About to add upper bound { Group#mentioned_posts_for arg: opts } <= ([ []: (:before_post_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ] and [ []: (:category_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ])
HERE 2
HERE 2a
About to add lower bound ([ []: (:before_post_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ] and [ []: (:category_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ]) <= { Group#mentioned_posts_for arg: opts }
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
Extracted solution for Group#mentioned_posts_for is (Guardian,?([ []: (:before_post_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ] and [ []: (:category_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ])) -> { Group#mentioned_posts_for ret: ret }
About to add upper bound { [s]Group#trust_group_ids ret: ret } <= Array<Integer>
About to add lower bound Array<Integer> <= { [s]Group#trust_group_ids ret: ret }
HERE 2
HERE 2a
HERE 2
HERE 2a
Extracted solution for [s]Group#trust_group_ids is () -> Array<Integer>
About to add upper bound { [s]Group#desired_trust_level_groups arg: trust_level } <= [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ]
About to add upper bound { [s]Group#user_trust_level_change! arg: trust_level } <= [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ]
About to add lower bound [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ] <= { [s]Group#desired_trust_level_groups arg: trust_level }
HERE 1
HERE 1a
false AND true
About to add upper bound { [s]Group#desired_trust_level_groups ret: ret } <= Array<Integer>
About to add upper bound { { [s]Group#trust_group_ids ret: ret }#keep_if ret: ret } <= Array<Integer>
About to add lower bound Array<Integer> <= { [s]Group#desired_trust_level_groups ret: ret }
Extracted solution for [s]Group#desired_trust_level_groups is ([ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ]) -> Array<Integer>
About to add upper bound { [s]Group#user_trust_level_change! arg: user_id } <= Integer
About to add lower bound Integer <= { [s]Group#user_trust_level_change! arg: user_id }
About to add upper bound { [s]Group#user_trust_level_change! arg: trust_level } <= [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ]
About to add lower bound [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ] <= { [s]Group#user_trust_level_change! arg: trust_level }
About to add lower bound [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ] <= { [s]Group#desired_trust_level_groups arg: trust_level }
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
About to add upper bound { [s]Group#user_trust_level_change! ret: ret } <= Array<Integer>
About to add upper bound { { [s]Group#desired_trust_level_groups ret: ret }#each ret: ret } <= Array<Integer>
About to add lower bound Array<Integer> <= { [s]Group#user_trust_level_change! ret: ret }
Extracted solution for [s]Group#user_trust_level_change! is (Integer,[ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ]) -> Array<Integer>
About to add upper bound { [s]Group#refresh_automatic_group! arg: name } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Group#refresh_automatic_group! arg: name }
About to add lower bound (Symbol or String) <= { [s]Group#lookup_group arg: name }
About to add upper bound { [s]Group#refresh_automatic_group! ret: ret } <= Group
HERE 2
HERE 2a
About to add upper bound { [s]Group#lookup_group ret: ret } <= Group
About to add upper bound { [s]Group#lookup_group ret: ret } <= Group
About to add lower bound Group <= { [s]Group#refresh_automatic_group! ret: ret }
Extracted solution for [s]Group#refresh_automatic_group! is ((Symbol or String)) -> Group
About to add upper bound { [s]Group#lookup_group arg: name } <= (Symbol or String)
About to add upper bound { [s]Group#refresh_automatic_group! arg: name } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Group#lookup_group arg: name }
About to add upper bound { [s]Group#lookup_group ret: ret } <= Group
About to add lower bound Group <= { [s]Group#lookup_group ret: ret }
HERE 2
HERE 2a
HERE 2
HERE 2a
HERE 2
HERE 2a
About to add lower bound Group <= { [s]Group#refresh_automatic_group! ret: ret }
Extracted solution for [s]Group#lookup_group is ((Symbol or String)) -> Group
About to add upper bound { [s]Draft#find_draft arg: user } <= User
About to add lower bound User <= { [s]Draft#find_draft arg: user }
About to add lower bound (false or true) <= { { [s]Draft#find_draft arg: user }#is_a? ret: ret }
About to add lower bound Integer <= { { [s]Draft#find_draft arg: user }#id ret: ret }
Attempted to apply rule is_model to var { [s]Draft#find_draft arg: user }, but go the following error: 
Inconsistent type constraint User <= Integer generated during inference.
 
 /Users/milod/Documents/works/discourse2/discourse/app/models/draft.rb:40:7: error: Integer constraint generated here.
/Users/milod/Documents/works/discourse2/discourse/app/models/draft.rb:40:       find_by(user_id: user, draft_key: key)
/Users/milod/Documents/works/discourse2/discourse/app/models/draft.rb:40:       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
About to add upper bound { [s]Draft#find_draft arg: user } <= (Integer and [ id: () -> { { [s]Draft#find_draft arg: user }#id ret: ret } ])
About to add lower bound (Integer and [ id: () -> { { [s]Draft#find_draft arg: user }#id ret: ret } ]) <= { [s]Draft#find_draft arg: user }
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
About to add upper bound { [s]Draft#find_draft arg: key } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Draft#find_draft arg: key }
About to add upper bound { [s]Draft#find_draft ret: ret } <= Draft
About to add lower bound Draft <= { [s]Draft#find_draft ret: ret }
Extracted solution for [s]Draft#find_draft is ((Integer and [ id: () -> { { [s]Draft#find_draft arg: user }#id ret: ret } ]),(Symbol or String)) -> Draft
About to add upper bound { Topic#update_action_counts ret: ret } <= (false or true)
About to add lower bound (false or true) <= { Topic#update_action_counts ret: ret }
Extracted solution for Topic#update_action_counts is () -> (false or true)
About to add upper bound { Topic#has_topic_embed? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { Topic#has_topic_embed? ret: ret }
About to add lower bound (false or true) <= { Topic#expandable_first_post? ret: ret }
Extracted solution for Topic#has_topic_embed? is () -> (false or true)
About to add upper bound { Topic#expandable_first_post? ret: ret } <= (false or true)
About to add upper bound { Topic#has_topic_embed? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { Topic#expandable_first_post? ret: ret }
Extracted solution for Topic#expandable_first_post? is () -> (false or true)
About to add upper bound { [s]Notification#remove_for arg: user_id } <= Integer
About to add lower bound Integer <= { [s]Notification#remove_for arg: user_id }
About to add upper bound { [s]Notification#remove_for arg: topic_id } <= Integer
About to add lower bound Integer <= { [s]Notification#remove_for arg: topic_id }
About to add upper bound { [s]Notification#remove_for ret: ret } <= Integer
About to add lower bound Integer <= { [s]Notification#remove_for ret: ret }
Extracted solution for [s]Notification#remove_for is (Integer,Integer) -> Integer
About to add upper bound { Notification#post ret: ret } <= Post
About to add lower bound Post <= { Notification#post ret: ret }
Extracted solution for Notification#post is () -> Post
About to add upper bound { [s]Badge#trust_level_badge_ids ret: ret } <= Array<Integer>
About to add lower bound Array<Integer> <= { [s]Badge#trust_level_badge_ids ret: ret }
Extracted solution for [s]Badge#trust_level_badge_ids is () -> Array<Integer>
About to add upper bound { [s]User#reserved_username? arg: username } <= String
About to add upper bound { [s]User#normalize_username ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add lower bound String <= { [s]User#reserved_username? arg: username }
About to add lower bound String <= { [s]User#normalize_username arg: username }
About to add upper bound { [s]User#reserved_username? ret: ret } <= (false or true)
About to add upper bound { { { { [s]SiteSetting#reserved_usernames ret: ret }#unicode_normalize ret: ret }#split ret: ret }#any? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { [s]User#reserved_username? ret: ret }
Extracted solution for [s]User#reserved_username? is (String) -> (false or true)
Extracted solution for [s]EmailToken#valid_after is () -> { [s]EmailToken#valid_after ret: ret }
About to add upper bound { [s]EmailToken#confirm ret: ret } <= nil
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#reload ret: ret } <= nil
About to add upper bound { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret } <= nil
About to add lower bound nil <= { [s]EmailToken#confirm ret: ret }
Extracted solution for [s]EmailToken#confirm is ({ [s]EmailToken#confirm arg: token },{ skip_reviewable: ?{ [s]EmailToken#confirm arg: skip_reviewable } }) -> nil
About to add upper bound { [s]EmailToken#confirmable arg: token } <= (Symbol or String or Array<(Symbol or String)>)
About to add lower bound (Symbol or String or Array<(Symbol or String)>) <= { [s]EmailToken#confirmable arg: token }
About to add upper bound { [s]EmailToken#confirmable ret: ret } <= EmailToken
About to add lower bound EmailToken <= { [s]EmailToken#confirmable ret: ret }
Extracted solution for [s]EmailToken#confirmable is ((Symbol or String or Array<(Symbol or String)>)) -> EmailToken
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= (Symbol or String or Mail::Multibyte::Chars or Resolv::DNS::Label::Str)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String or Mail::Multibyte::Chars or Resolv::DNS::Label::Str)
About to add lower bound (Symbol or String or Mail::Multibyte::Chars or Resolv::DNS::Label::Str) <= { [s]Invite#redeem_from_email arg: email }
About to add lower bound (Symbol or String or Mail::Multibyte::Chars or Resolv::DNS::Label::Str) <= { [s]Email#downcase arg: email }
About to add lower bound (Symbol or String or Mail::Multibyte::Chars or Resolv::DNS::Label::Str) <= { [s]Email#is_valid? arg: email }
About to add lower bound (Symbol or String or Mail::Multibyte::Chars or Resolv::DNS::Label::Str) <= { [s]Email#downcase ret: ret }
Attempted to apply rule struct_to_nominal to var { [s]Invite#redeem_from_email arg: email }, but go the following error: 
Inconsistent type constraint (Symbol or String or Mail::Multibyte::Chars or Resolv::DNS::Label::Str) <= (Symbol or String) generated during inference.
 
 /Users/milod/Documents/works/discourse2/discourse/app/models/invite.rb:232:14: error: (Symbol or String) constraint generated here.
/Users/milod/Documents/works/discourse2/discourse/app/models/invite.rb:232:     invite = Invite.find_by(email: Email.downcase(email))
/Users/milod/Documents/works/discourse2/discourse/app/models/invite.rb:232:              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Invite#redeem_from_email arg: email }
About to add lower bound (Symbol or String) <= { [s]Email#downcase arg: email }
About to add lower bound (Symbol or String) <= { [s]Email#is_valid? arg: email }
About to add lower bound (Symbol or String) <= { [s]Email#downcase ret: ret }
About to add lower bound Symbol <= { { [s]Email#downcase arg: email }#downcase ret: ret }
About to add lower bound Symbol <= { [s]Email#downcase ret: ret }
About to add lower bound String <= { { [s]Email#downcase arg: email }#downcase ret: ret }
About to add lower bound String <= { [s]Email#downcase ret: ret }
About to add lower bound (Symbol or String) <= { [s]Email#is_valid? arg: email }
About to add lower bound (Symbol or String) <= { [s]Email#downcase ret: ret }
About to add upper bound { [s]Invite#redeem_from_email ret: ret } <= Invite
About to add lower bound Invite <= { [s]Invite#redeem_from_email ret: ret }
Extracted solution for [s]Invite#redeem_from_email is ((Symbol or String)) -> Invite
About to add upper bound { [s]Email#downcase arg: email } <= (Symbol or String or Mail::Multibyte::Chars or Resolv::DNS::Label::Str)
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= (Symbol or String or Mail::Multibyte::Chars or Resolv::DNS::Label::Str)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String or Mail::Multibyte::Chars or Resolv::DNS::Label::Str)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String or Mail::Multibyte::Chars or Resolv::DNS::Label::Str)
About to add lower bound (Symbol or String or Mail::Multibyte::Chars or Resolv::DNS::Label::Str) <= { [s]Email#downcase arg: email }
About to add lower bound (Symbol or String or Mail::Multibyte::Chars or Resolv::DNS::Label::Str) <= { [s]Email#is_valid? arg: email }
About to add lower bound (Symbol or String or Mail::Multibyte::Chars or Resolv::DNS::Label::Str) <= { [s]Email#downcase ret: ret }
Attempted to apply rule struct_to_nominal to var { [s]Email#downcase arg: email }, but go the following error: 
Inconsistent type constraint (Symbol or String or Mail::Multibyte::Chars or Resolv::DNS::Label::Str) <= (Symbol or String) generated during inference.
 
 /Users/milod/Documents/works/discourse2/discourse/app/models/invite.rb:232:14: error: (Symbol or String) constraint generated here.
/Users/milod/Documents/works/discourse2/discourse/app/models/invite.rb:232:     invite = Invite.find_by(email: Email.downcase(email))
/Users/milod/Documents/works/discourse2/discourse/app/models/invite.rb:232:              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
About to add upper bound { [s]Email#downcase arg: email } <= (Symbol or String)
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Email#downcase arg: email }
About to add lower bound (Symbol or String) <= { [s]Email#is_valid? arg: email }
About to add lower bound (Symbol or String) <= { [s]Email#downcase ret: ret }
About to add upper bound { [s]Email#downcase ret: ret } <= (Symbol or String)
About to add upper bound { [s]Email#downcase arg: email } <= (Symbol or String)
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add upper bound { { [s]Email#downcase arg: email }#downcase ret: ret } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Email#downcase ret: ret }
Extracted solution for [s]Email#downcase is ((Symbol or String)) -> (Symbol or String)
About to add upper bound { [s]Email#is_valid? ret: ret } <= false
About to add upper bound { { { { [s]EmailValidator#email_regex ret: ret }#=~ ret: ret }#! ret: ret }#! ret: ret } <= false
About to add lower bound false <= { [s]Email#is_valid? ret: ret }
Extracted solution for [s]Email#is_valid? is ({ [s]Email#is_valid? arg: email }) -> false
About to add upper bound { [s]PostActionType#notify_flag_type_ids ret: ret } <= Array<Integer>
About to add upper bound { { [s]PostActionType#notify_flag_types ret: ret }#values ret: ret } <= Array<Integer>
About to add lower bound Array<Integer> <= { [s]PostActionType#notify_flag_type_ids ret: ret }
Extracted solution for [s]PostActionType#notify_flag_type_ids is () -> Array<Integer>
Extracted solution for [s]PostActionType#notify_flag_types is () -> { [s]PostActionType#notify_flag_types ret: ret }
About to add upper bound { [s]PostActionType#flag_settings ret: ret } <= FlagSettings
About to add upper bound { PostActionType# var: @flag_settings } <= FlagSettings
About to add lower bound FlagSettings <= { [s]PostActionType#flag_settings ret: ret }
Extracted solution for [s]PostActionType#flag_settings is () -> FlagSettings
About to add upper bound { User#new_user_posting_on_first_day? ret: ret } <= (false or true)
About to add upper bound { { User#first_post_created_at ret: ret }#nil? ret: ret } <= (false or true)
About to add upper bound { { User#first_post_created_at ret: ret }#>= ret: ret } <= (false or true)
About to add lower bound (false or true) <= { User#new_user_posting_on_first_day? ret: ret }
Extracted solution for User#new_user_posting_on_first_day? is () -> (false or true)
About to add upper bound { User#first_post_created_at ret: ret } <= (DateTime or Time)
About to add lower bound (DateTime or Time) <= { User#first_post_created_at ret: ret }
Extracted solution for User#first_post_created_at is () -> (DateTime or Time)
About to add upper bound { RateLimiter#initialize arg: user } <= User
About to add lower bound User <= { RateLimiter#initialize arg: user }
About to add lower bound User <= { RateLimiter# var: @user }
About to add upper bound { RateLimiter#initialize arg: type } <= 'first-day-replies-per-day'
About to add lower bound 'first-day-replies-per-day' <= { RateLimiter#initialize arg: type }
About to add lower bound 'first-day-replies-per-day' <= { RateLimiter# var: @type }
About to add lower bound 'first-day-replies-per-day' <= { RateLimiter#build_key arg: type }
About to add upper bound { RateLimiter#initialize arg: max } <= Integer
About to add lower bound Integer <= { RateLimiter#initialize arg: max }
About to add lower bound Integer <= { RateLimiter# var: @max }
About to add upper bound { RateLimiter#initialize arg: secs } <= Integer
About to add lower bound Integer <= { RateLimiter#initialize arg: secs }
About to add lower bound Integer <= { RateLimiter# var: @secs }
About to add upper bound { RateLimiter#initialize arg: global } <= false
About to add lower bound false <= { RateLimiter#initialize arg: global }
About to add lower bound false <= { RateLimiter# var: @global }
Extracted solution for RateLimiter#initialize is (User,'first-day-replies-per-day',Integer,Integer,{ global: ?false }) -> RateLimiter
About to add upper bound { UsernameValidator#initialize arg: username } <= String
About to add upper bound { [s]User#normalize_username ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add lower bound String <= { UsernameValidator#initialize arg: username }
Extracted solution for UsernameValidator#initialize is (String) -> UsernameValidator
About to add upper bound { UsernameValidator#valid_format? ret: ret } <= (false or true)
About to add upper bound { { UsernameValidator#errors ret: ret }#empty? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { UsernameValidator#valid_format? ret: ret }
Extracted solution for UsernameValidator#valid_format? is () -> (false or true)
About to add upper bound { UsernameValidator#username_length_min? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_length_min? ret: ret }
Extracted solution for UsernameValidator#username_length_min? is () -> nil
About to add upper bound { UsernameValidator#username_length_max? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_length_max? ret: ret }
Extracted solution for UsernameValidator#username_length_max? is () -> nil
About to add upper bound { UsernameValidator#username_char_valid? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_char_valid? ret: ret }
Extracted solution for UsernameValidator#username_char_valid? is () -> nil
About to add upper bound { UsernameValidator#username_char_whitelisted? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_char_whitelisted? ret: ret }
Extracted solution for UsernameValidator#username_char_whitelisted? is () -> nil
About to add upper bound { UsernameValidator#username_first_char_valid? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_first_char_valid? ret: ret }
Extracted solution for UsernameValidator#username_first_char_valid? is () -> nil
About to add upper bound { UsernameValidator#username_last_char_valid? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_last_char_valid? ret: ret }
Extracted solution for UsernameValidator#username_last_char_valid? is () -> nil
About to add upper bound { UsernameValidator#username_no_double_special? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_no_double_special? ret: ret }
Extracted solution for UsernameValidator#username_no_double_special? is () -> nil
About to add upper bound { UsernameValidator#username_does_not_end_with_confusing_suffix? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_does_not_end_with_confusing_suffix? ret: ret }
Extracted solution for UsernameValidator#username_does_not_end_with_confusing_suffix? is () -> nil
About to add upper bound { [s]User#normalize_username arg: username } <= String
About to add upper bound { [s]User#find_by_username arg: username } <= String
About to add upper bound { [s]User#username_available? arg: username } <= String
About to add upper bound { [s]I18n#t ret: ret } <= String
About to add upper bound { [s]User#reserved_username? arg: username } <= String
About to add upper bound { [s]User#normalize_username ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { [s]User#username_exists? arg: username } <= String
About to add upper bound { [s]User#normalize_username ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { [s]User#normalize_username ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add lower bound String <= { [s]User#normalize_username arg: username }
About to add upper bound { [s]User#normalize_username ret: ret } <= nil
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= nil
About to add lower bound nil <= { [s]User#normalize_username ret: ret }
About to add lower bound nil <= { [s]User#reserved_username? arg: username }
About to add lower bound nil <= { [s]User#normalize_username arg: username }
About to add lower bound nil <= { [s]User#username_exists? arg: username }
About to add lower bound nil <= { [s]User#normalize_username arg: username }
About to add lower bound nil <= { UsernameValidator#initialize arg: username }
About to add lower bound nil <= { [s]User#normalize_username arg: username }
Extracted solution for [s]User#normalize_username is (String) -> nil
About to add upper bound { [s]User#username_exists? arg: username } <= String
About to add upper bound { [s]User#normalize_username ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add lower bound String <= { [s]User#username_exists? arg: username }
About to add lower bound String <= { [s]User#normalize_username arg: username }
About to add upper bound { [s]User#username_exists? ret: ret } <= (false or true)
About to add upper bound { { MiniSqlMultisiteConnection#exec ret: ret }#> ret: ret } <= (false or true)
About to add lower bound (false or true) <= { [s]User#username_exists? ret: ret }
About to add lower bound (false or true) <= { { [s]User#username_exists? ret: ret }#! ret: ret }
Extracted solution for [s]User#username_exists? is (String) -> (false or true)
About to add upper bound { User#create_reviewable ret: ret } <= nil
About to add upper bound { [s]Jobs#enqueue ret: ret } <= nil
About to add lower bound nil <= { User#create_reviewable ret: ret }
About to add lower bound nil <= { User#activate ret: ret }
Extracted solution for User#create_reviewable is () -> nil


Running solution extraction...
About to add upper bound { PostActionType# var: @flag_settings } <= FlagSettings
About to add lower bound FlagSettings <= { PostActionType# var: @flag_settings }
About to add lower bound FlagSettings <= { [s]PostActionType#flag_settings ret: ret }
Extracted solution for { PostActionType# var: @flag_settings } is FlagSettings.
About to add upper bound { RateLimiter# var: @user } <= User
About to add upper bound { RateLimiter#initialize arg: user } <= User
About to add lower bound User <= { RateLimiter# var: @user }
Extracted solution for { RateLimiter# var: @user } is User.
About to add upper bound { RateLimiter# var: @type } <= 'first-day-replies-per-day'
About to add upper bound { RateLimiter#initialize arg: type } <= 'first-day-replies-per-day'
About to add lower bound 'first-day-replies-per-day' <= { RateLimiter# var: @type }
Extracted solution for { RateLimiter# var: @type } is 'first-day-replies-per-day'.
Extracted solution for { RateLimiter# var: @key } is { RateLimiter# var: @key }.
About to add upper bound { RateLimiter# var: @max } <= Integer
About to add upper bound { RateLimiter#initialize arg: max } <= Integer
About to add lower bound Integer <= { RateLimiter# var: @max }
Extracted solution for { RateLimiter# var: @max } is Integer.
About to add upper bound { RateLimiter# var: @secs } <= Integer
About to add upper bound { RateLimiter#initialize arg: secs } <= Integer
About to add lower bound Integer <= { RateLimiter# var: @secs }
Extracted solution for { RateLimiter# var: @secs } is Integer.
About to add upper bound { RateLimiter# var: @global } <= false
About to add upper bound { RateLimiter#initialize arg: global } <= false
About to add lower bound false <= { RateLimiter# var: @global }
Extracted solution for { RateLimiter# var: @global } is false.
Extracted solution for { UsernameValidator# var: @username } is { UsernameValidator# var: @username }.
About to add upper bound { UsernameValidator# var: @errors } <= []
About to add lower bound [] <= { UsernameValidator# var: @errors }
Extracted solution for { UsernameValidator# var: @errors } is [].
HERE 1
About to add upper bound { [s]User#new_from_params arg: params } <= ({ name: String, email: String, password: { { [s]User#new_from_params arg: params }#[] ret: ret }, username: String } and [ []: (:email) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ] and [ []: (:name) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ] and [ []: (:username) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ])
HERE 1
HERE 1a
false AND true
About to add lower bound ({ name: String, email: String, password: { { [s]User#new_from_params arg: params }#[] ret: ret }, username: String } and [ []: (:email) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ] and [ []: (:name) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ] and [ []: (:username) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ]) <= { [s]User#new_from_params arg: params }
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
About to add upper bound { [s]User#new_from_params ret: ret } <= User
About to add lower bound User <= { [s]User#new_from_params ret: ret }
Extracted solution for [s]User#new_from_params is (({ name: String, email: String, password: { { [s]User#new_from_params arg: params }#[] ret: ret }, username: String } and [ []: (:email) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ] and [ []: (:name) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ] and [ []: (:username) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ])) -> User
About to add upper bound { [s]User#find_by_username arg: username } <= String
About to add lower bound String <= { [s]User#find_by_username arg: username }
About to add lower bound String <= { [s]User#normalize_username arg: username }
About to add upper bound { [s]User#find_by_username ret: ret } <= User
About to add lower bound User <= { [s]User#find_by_username ret: ret }
Extracted solution for [s]User#find_by_username is (String) -> User
About to add upper bound { [s]User#username_available? arg: username } <= String
About to add lower bound String <= { [s]User#username_available? arg: username }
About to add lower bound String <= { [s]User#normalize_username arg: username }
About to add upper bound { [s]User#username_available? arg: email } <= [ present?: () -> { { [s]User#username_available? arg: email }#present? ret: ret } ]
HERE 1
HERE 1a
false AND true
About to add lower bound [ present?: () -> { { [s]User#username_available? arg: email }#present? ret: ret } ] <= { [s]User#username_available? arg: email }
HERE 1
HERE 1a
false AND true
About to add upper bound { [s]User#username_available? arg: allow_reserved_username } <= [ !: () -> { { [s]User#username_available? arg: allow_reserved_username }#! ret: ret } ]
HERE 1
HERE 1a
false AND true
About to add lower bound [ !: () -> { { [s]User#username_available? arg: allow_reserved_username }#! ret: ret } ] <= { [s]User#username_available? arg: allow_reserved_username }
HERE 1
HERE 1a
false AND true
About to add upper bound { [s]User#username_available? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { [s]User#username_available? ret: ret }
Extracted solution for [s]User#username_available? is (String,?[ present?: () -> { { [s]User#username_available? arg: email }#present? ret: ret } ],{ allow_reserved_username: ?[ !: () -> { { [s]User#username_available? arg: allow_reserved_username }#! ret: ret } ] }) -> (false or true)
About to add upper bound { User#featured_user_badges arg: limit } <= Integer
About to add lower bound Integer <= { User#featured_user_badges arg: limit }
About to add upper bound { User#featured_user_badges ret: ret } <= Array<(Topic or User or Post or UserBadge or Badge or BadgeType or GrantedBy)>
About to add lower bound Array<(Topic or User or Post or UserBadge or Badge or BadgeType or GrantedBy)> <= { User#featured_user_badges ret: ret }
Extracted solution for User#featured_user_badges is (?Integer) -> Array<(Topic or User or Post or UserBadge or Badge or BadgeType or GrantedBy)>
About to add upper bound { User#email_confirmed? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { User#email_confirmed? ret: ret }
Extracted solution for User#email_confirmed? is () -> (false or true)
About to add upper bound { User#activate ret: ret } <= nil
About to add upper bound { User#create_reviewable ret: ret } <= nil
About to add upper bound { [s]Jobs#enqueue ret: ret } <= nil
About to add upper bound { [s]Jobs#enqueue ret: ret } <= nil
About to add lower bound nil <= { User#activate ret: ret }
Extracted solution for User#activate is () -> nil
About to add upper bound { User#number_of_deleted_posts ret: ret } <= Integer
About to add lower bound Integer <= { User#number_of_deleted_posts ret: ret }
Extracted solution for User#number_of_deleted_posts is () -> Integer
About to add upper bound { User#number_of_flags_given ret: ret } <= Integer
About to add lower bound Integer <= { User#number_of_flags_given ret: ret }
Extracted solution for User#number_of_flags_given is () -> Integer
About to add upper bound { User#create_user_profile ret: ret } <= UserProfile
About to add lower bound UserProfile <= { User#create_user_profile ret: ret }
Extracted solution for User#create_user_profile is () -> UserProfile
About to add upper bound { User#create_user_option ret: ret } <= UserOption
About to add lower bound UserOption <= { User#create_user_option ret: ret }
Extracted solution for User#create_user_option is () -> UserOption
About to add upper bound { User#create_email_token ret: ret } <= EmailToken
About to add lower bound EmailToken <= { User#create_email_token ret: ret }
Extracted solution for User#create_email_token is () -> EmailToken
About to add upper bound { User#update_usernames ret: ret } <= String
About to add lower bound String <= { User#update_usernames ret: ret }
Extracted solution for User#update_usernames is () -> String
About to add upper bound { User#seen_before? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { User#seen_before? ret: ret }
Extracted solution for User#seen_before? is () -> (false or true)
About to add upper bound { [s]EmailToken#active ret: ret } <= ActiveRecord_Relation<EmailToken>
About to add lower bound ActiveRecord_Relation<EmailToken> <= { [s]EmailToken#active ret: ret }
Extracted solution for [s]EmailToken#active is () -> ActiveRecord_Relation<EmailToken>
About to add upper bound { Post#seen? arg: user } <= User
About to add lower bound User <= { Post#seen? arg: user }
About to add upper bound { Post#seen? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { Post#seen? ret: ret }
Extracted solution for Post#seen? is (User) -> (false or true)
About to add upper bound { [s]Post#find_by_detail arg: key } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Post#find_by_detail arg: key }
About to add upper bound { [s]Post#find_by_detail arg: value } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Post#find_by_detail arg: value }
About to add upper bound { [s]Post#find_by_detail ret: ret } <= Post
About to add lower bound Post <= { [s]Post#find_by_detail ret: ret }
Extracted solution for [s]Post#find_by_detail is ((Symbol or String),(Symbol or String)) -> Post
About to add upper bound { Post#is_flagged? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { Post#is_flagged? ret: ret }
Extracted solution for Post#is_flagged? is () -> (false or true)
About to add upper bound { Post#is_reply_by_email? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { Post#is_reply_by_email? ret: ret }
Extracted solution for Post#is_reply_by_email? is () -> (false or true)
About to add upper bound { Post#add_detail arg: key } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { Post#add_detail arg: key }
About to add upper bound { Post#add_detail arg: value } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { Post#add_detail arg: value }
About to add upper bound { Post#add_detail arg: extra } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { Post#add_detail arg: extra }
About to add upper bound { Post#add_detail ret: ret } <= PostDetail
About to add lower bound PostDetail <= { Post#add_detail ret: ret }
Extracted solution for Post#add_detail is ((Symbol or String),(Symbol or String),?((Symbol or String))) -> PostDetail
About to add upper bound { Post#limit_posts_per_day ret: ret } <= RateLimiter
About to add lower bound RateLimiter <= { Post#limit_posts_per_day ret: ret }
Extracted solution for Post#limit_posts_per_day is () -> RateLimiter
About to add upper bound { [s]Archetype#private_message ret: ret } <= 'private_message'
About to add lower bound 'private_message' <= { [s]Archetype#private_message ret: ret }
Extracted solution for [s]Archetype#private_message is () -> 'private_message'
About to add upper bound { Group#posts_for arg: guardian } <= Guardian
About to add lower bound Guardian <= { Group#posts_for arg: guardian }
About to add upper bound { { Group#posts_for arg: opts }#[] ret: ret } <= [ present?: () -> { { { Group#posts_for arg: opts }#[] ret: ret }#present? ret: ret } ]
HERE 1
HERE 1a
false AND true
About to add lower bound [ present?: () -> { { { Group#posts_for arg: opts }#[] ret: ret }#present? ret: ret } ] <= { { Group#posts_for arg: opts }#[] ret: ret }
HERE 1
HERE 1a
false AND true
About to add upper bound { { Group#posts_for arg: opts }#[] ret: ret } <= [ present?: () -> { { { Group#posts_for arg: opts }#[] ret: ret }#present? ret: ret } ]
HERE 1
HERE 1a
false AND true
About to add lower bound [ present?: () -> { { { Group#posts_for arg: opts }#[] ret: ret }#present? ret: ret } ] <= { { Group#posts_for arg: opts }#[] ret: ret }
HERE 1
HERE 1a
false AND true
About to add upper bound { Group#posts_for arg: opts } <= { category_id: [ present?: () -> { { { Group#posts_for arg: opts }#[] ret: ret }#present? ret: ret } ], before_post_id: { { Group#posts_for arg: opts }#[] ret: ret } }
Attempted to apply rule hash_access to var { Group#posts_for arg: opts }, but go the following error: 
Inconsistent type constraint ({  } or { Group#posts_for arg: opts }) <= { category_id: [ present?: () -> { { { Group#posts_for arg: opts }#[] ret: ret }#present? ret: ret } ], before_post_id: { { Group#posts_for arg: opts }#[] ret: ret } } generated during inference.
 /Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:304:5: note: ({  } or { Group#posts_for arg: opts }) constraint generated here.
/Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:304:     opts ||= {}
/Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:304:     ^~~~~~~~~~~
 
About to add upper bound { Group#posts_for arg: opts } <= ([ []: (:category_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ] and [ []: (:before_post_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ])
HERE 2
HERE 2a
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
About to add lower bound ([ []: (:category_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ] and [ []: (:before_post_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ]) <= { Group#posts_for arg: opts }
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
Extracted solution for Group#posts_for is (Guardian,?([ []: (:category_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ] and [ []: (:before_post_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ])) -> { Group#posts_for ret: ret }
About to add upper bound { Group#messages_for arg: guardian } <= Guardian
About to add lower bound Guardian <= { Group#messages_for arg: guardian }
About to add upper bound { { Group#messages_for arg: opts }#[] ret: ret } <= [ present?: () -> { { { Group#messages_for arg: opts }#[] ret: ret }#present? ret: ret } ]
HERE 1
HERE 1a
false AND true
About to add lower bound [ present?: () -> { { { Group#messages_for arg: opts }#[] ret: ret }#present? ret: ret } ] <= { { Group#messages_for arg: opts }#[] ret: ret }
HERE 1
HERE 1a
false AND true
About to add upper bound { { Group#messages_for arg: opts }#[] ret: ret } <= [ present?: () -> { { { Group#messages_for arg: opts }#[] ret: ret }#present? ret: ret } ]
HERE 1
HERE 1a
false AND true
About to add lower bound [ present?: () -> { { { Group#messages_for arg: opts }#[] ret: ret }#present? ret: ret } ] <= { { Group#messages_for arg: opts }#[] ret: ret }
HERE 1
HERE 1a
false AND true
About to add upper bound { Group#messages_for arg: opts } <= { category_id: [ present?: () -> { { { Group#messages_for arg: opts }#[] ret: ret }#present? ret: ret } ], before_post_id: { { Group#messages_for arg: opts }#[] ret: ret } }
Attempted to apply rule hash_access to var { Group#messages_for arg: opts }, but go the following error: 
Inconsistent type constraint ({  } or { Group#messages_for arg: opts }) <= { category_id: [ present?: () -> { { { Group#messages_for arg: opts }#[] ret: ret }#present? ret: ret } ], before_post_id: { { Group#messages_for arg: opts }#[] ret: ret } } generated during inference.
 /Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:323:5: note: ({  } or { Group#messages_for arg: opts }) constraint generated here.
/Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:323:     opts ||= {}
/Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:323:     ^~~~~~~~~~~
 
About to add upper bound { Group#messages_for arg: opts } <= ([ []: (:before_post_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ] and [ []: (:category_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ])
HERE 2
HERE 2a
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
About to add lower bound ([ []: (:before_post_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ] and [ []: (:category_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ]) <= { Group#messages_for arg: opts }
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
Extracted solution for Group#messages_for is (Guardian,?([ []: (:before_post_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ] and [ []: (:category_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ])) -> { Group#messages_for ret: ret }
About to add upper bound { Group#mentioned_posts_for arg: guardian } <= Guardian
About to add lower bound Guardian <= { Group#mentioned_posts_for arg: guardian }
About to add upper bound { { Group#mentioned_posts_for arg: opts }#[] ret: ret } <= [ present?: () -> { { { Group#mentioned_posts_for arg: opts }#[] ret: ret }#present? ret: ret } ]
HERE 1
HERE 1a
false AND true
About to add lower bound [ present?: () -> { { { Group#mentioned_posts_for arg: opts }#[] ret: ret }#present? ret: ret } ] <= { { Group#mentioned_posts_for arg: opts }#[] ret: ret }
HERE 1
HERE 1a
false AND true
About to add upper bound { { Group#mentioned_posts_for arg: opts }#[] ret: ret } <= [ present?: () -> { { { Group#mentioned_posts_for arg: opts }#[] ret: ret }#present? ret: ret } ]
HERE 1
HERE 1a
false AND true
About to add lower bound [ present?: () -> { { { Group#mentioned_posts_for arg: opts }#[] ret: ret }#present? ret: ret } ] <= { { Group#mentioned_posts_for arg: opts }#[] ret: ret }
HERE 1
HERE 1a
false AND true
About to add upper bound { Group#mentioned_posts_for arg: opts } <= { category_id: [ present?: () -> { { { Group#mentioned_posts_for arg: opts }#[] ret: ret }#present? ret: ret } ], before_post_id: { { Group#mentioned_posts_for arg: opts }#[] ret: ret } }
Attempted to apply rule hash_access to var { Group#mentioned_posts_for arg: opts }, but go the following error: 
Inconsistent type constraint ({  } or { Group#mentioned_posts_for arg: opts }) <= { category_id: [ present?: () -> { { { Group#mentioned_posts_for arg: opts }#[] ret: ret }#present? ret: ret } ], before_post_id: { { Group#mentioned_posts_for arg: opts }#[] ret: ret } } generated during inference.
 /Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:341:5: note: ({  } or { Group#mentioned_posts_for arg: opts }) constraint generated here.
/Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:341:     opts ||= {}
/Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:341:     ^~~~~~~~~~~
 
About to add upper bound { Group#mentioned_posts_for arg: opts } <= ([ []: (:before_post_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ] and [ []: (:category_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ])
HERE 2
HERE 2a
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
About to add lower bound ([ []: (:before_post_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ] and [ []: (:category_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ]) <= { Group#mentioned_posts_for arg: opts }
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
Extracted solution for Group#mentioned_posts_for is (Guardian,?([ []: (:before_post_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ] and [ []: (:category_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ])) -> { Group#mentioned_posts_for ret: ret }
About to add upper bound { [s]Group#trust_group_ids ret: ret } <= Array<Integer>
About to add lower bound Array<Integer> <= { [s]Group#trust_group_ids ret: ret }
HERE 2
HERE 2a
HERE 2
HERE 2a
Extracted solution for [s]Group#trust_group_ids is () -> Array<Integer>
About to add upper bound { [s]Group#desired_trust_level_groups arg: trust_level } <= [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ]
About to add upper bound { [s]Group#user_trust_level_change! arg: trust_level } <= [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ]
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
About to add lower bound [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ] <= { [s]Group#desired_trust_level_groups arg: trust_level }
HERE 1
HERE 1a
false AND true
About to add upper bound { [s]Group#desired_trust_level_groups ret: ret } <= Array<Integer>
About to add upper bound { { [s]Group#trust_group_ids ret: ret }#keep_if ret: ret } <= Array<Integer>
About to add lower bound Array<Integer> <= { [s]Group#desired_trust_level_groups ret: ret }
Extracted solution for [s]Group#desired_trust_level_groups is ([ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ]) -> Array<Integer>
About to add upper bound { [s]Group#user_trust_level_change! arg: user_id } <= Integer
About to add lower bound Integer <= { [s]Group#user_trust_level_change! arg: user_id }
About to add upper bound { [s]Group#user_trust_level_change! arg: trust_level } <= [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ]
HERE 1
HERE 1a
false AND true
About to add lower bound [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ] <= { [s]Group#user_trust_level_change! arg: trust_level }
About to add lower bound [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ] <= { [s]Group#desired_trust_level_groups arg: trust_level }
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
About to add upper bound { [s]Group#user_trust_level_change! ret: ret } <= Array<Integer>
About to add upper bound { { [s]Group#desired_trust_level_groups ret: ret }#each ret: ret } <= Array<Integer>
About to add lower bound Array<Integer> <= { [s]Group#user_trust_level_change! ret: ret }
Extracted solution for [s]Group#user_trust_level_change! is (Integer,[ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ]) -> Array<Integer>
About to add upper bound { [s]Group#refresh_automatic_group! arg: name } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Group#refresh_automatic_group! arg: name }
About to add lower bound (Symbol or String) <= { [s]Group#lookup_group arg: name }
About to add upper bound { [s]Group#refresh_automatic_group! ret: ret } <= Group
HERE 2
HERE 2a
About to add upper bound { [s]Group#lookup_group ret: ret } <= Group
About to add lower bound Group <= { [s]Group#refresh_automatic_group! ret: ret }
Extracted solution for [s]Group#refresh_automatic_group! is ((Symbol or String)) -> Group
About to add upper bound { [s]Group#lookup_group arg: name } <= (Symbol or String)
About to add upper bound { [s]Group#refresh_automatic_group! arg: name } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Group#lookup_group arg: name }
About to add upper bound { [s]Group#lookup_group ret: ret } <= Group
About to add lower bound Group <= { [s]Group#lookup_group ret: ret }
HERE 2
HERE 2a
HERE 2
HERE 2a
HERE 2
HERE 2a
About to add lower bound Group <= { [s]Group#refresh_automatic_group! ret: ret }
Extracted solution for [s]Group#lookup_group is ((Symbol or String)) -> Group
About to add upper bound { [s]Draft#find_draft arg: user } <= User
Attempted to apply rule is_model to var { [s]Draft#find_draft arg: user }, but go the following error: 
Inconsistent type constraint (Integer and [ id: () -> { { [s]Draft#find_draft arg: user }#id ret: ret } ]) <= User generated during inference.
 
 
About to add upper bound { [s]Draft#find_draft arg: user } <= (Integer and [ id: () -> { { [s]Draft#find_draft arg: user }#id ret: ret } ])
HERE 1
HERE 1a
false AND true
About to add lower bound (Integer and [ id: () -> { { [s]Draft#find_draft arg: user }#id ret: ret } ]) <= { [s]Draft#find_draft arg: user }
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
About to add upper bound { [s]Draft#find_draft arg: key } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Draft#find_draft arg: key }
About to add upper bound { [s]Draft#find_draft ret: ret } <= Draft
About to add lower bound Draft <= { [s]Draft#find_draft ret: ret }
Extracted solution for [s]Draft#find_draft is ((Integer and [ id: () -> { { [s]Draft#find_draft arg: user }#id ret: ret } ]),(Symbol or String)) -> Draft
About to add upper bound { Topic#update_action_counts ret: ret } <= (false or true)
About to add lower bound (false or true) <= { Topic#update_action_counts ret: ret }
Extracted solution for Topic#update_action_counts is () -> (false or true)
About to add upper bound { Topic#has_topic_embed? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { Topic#has_topic_embed? ret: ret }
About to add lower bound (false or true) <= { Topic#expandable_first_post? ret: ret }
Extracted solution for Topic#has_topic_embed? is () -> (false or true)
About to add upper bound { Topic#expandable_first_post? ret: ret } <= (false or true)
About to add upper bound { Topic#has_topic_embed? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { Topic#expandable_first_post? ret: ret }
Extracted solution for Topic#expandable_first_post? is () -> (false or true)
About to add upper bound { [s]Notification#remove_for arg: user_id } <= Integer
About to add lower bound Integer <= { [s]Notification#remove_for arg: user_id }
About to add upper bound { [s]Notification#remove_for arg: topic_id } <= Integer
About to add lower bound Integer <= { [s]Notification#remove_for arg: topic_id }
About to add upper bound { [s]Notification#remove_for ret: ret } <= Integer
About to add lower bound Integer <= { [s]Notification#remove_for ret: ret }
Extracted solution for [s]Notification#remove_for is (Integer,Integer) -> Integer
About to add upper bound { Notification#post ret: ret } <= Post
About to add lower bound Post <= { Notification#post ret: ret }
Extracted solution for Notification#post is () -> Post
About to add upper bound { [s]Badge#trust_level_badge_ids ret: ret } <= Array<Integer>
About to add lower bound Array<Integer> <= { [s]Badge#trust_level_badge_ids ret: ret }
Extracted solution for [s]Badge#trust_level_badge_ids is () -> Array<Integer>
About to add upper bound { [s]User#reserved_username? arg: username } <= String
About to add upper bound { [s]User#normalize_username ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add lower bound String <= { [s]User#reserved_username? arg: username }
About to add lower bound String <= { [s]User#normalize_username arg: username }
About to add upper bound { [s]User#reserved_username? ret: ret } <= (false or true)
About to add upper bound { { { { [s]SiteSetting#reserved_usernames ret: ret }#unicode_normalize ret: ret }#split ret: ret }#any? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { [s]User#reserved_username? ret: ret }
Extracted solution for [s]User#reserved_username? is (String) -> (false or true)
Extracted solution for [s]EmailToken#valid_after is () -> { [s]EmailToken#valid_after ret: ret }
About to add upper bound { [s]EmailToken#confirm ret: ret } <= nil
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#reload ret: ret } <= nil
About to add upper bound { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret } <= nil
About to add lower bound nil <= { [s]EmailToken#confirm ret: ret }
Extracted solution for [s]EmailToken#confirm is ({ [s]EmailToken#confirm arg: token },{ skip_reviewable: ?{ [s]EmailToken#confirm arg: skip_reviewable } }) -> nil
About to add upper bound { [s]EmailToken#confirmable arg: token } <= (Symbol or String or Array<(Symbol or String)>)
About to add lower bound (Symbol or String or Array<(Symbol or String)>) <= { [s]EmailToken#confirmable arg: token }
About to add upper bound { [s]EmailToken#confirmable ret: ret } <= EmailToken
About to add lower bound EmailToken <= { [s]EmailToken#confirmable ret: ret }
Extracted solution for [s]EmailToken#confirmable is ((Symbol or String or Array<(Symbol or String)>)) -> EmailToken
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Invite#redeem_from_email arg: email }
About to add lower bound (Symbol or String) <= { [s]Email#downcase arg: email }
About to add lower bound (Symbol or String) <= { [s]Email#is_valid? arg: email }
About to add lower bound (Symbol or String) <= { [s]Email#downcase ret: ret }
About to add lower bound (Symbol or String) <= { [s]Email#is_valid? arg: email }
About to add lower bound (Symbol or String) <= { [s]Email#downcase ret: ret }
About to add upper bound { [s]Invite#redeem_from_email ret: ret } <= Invite
About to add lower bound Invite <= { [s]Invite#redeem_from_email ret: ret }
Extracted solution for [s]Invite#redeem_from_email is ((Symbol or String)) -> Invite
About to add upper bound { [s]Email#downcase arg: email } <= (Symbol or String)
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Email#downcase arg: email }
About to add lower bound (Symbol or String) <= { [s]Email#is_valid? arg: email }
About to add lower bound (Symbol or String) <= { [s]Email#downcase ret: ret }
About to add upper bound { [s]Email#downcase ret: ret } <= (Symbol or String)
About to add upper bound { [s]Email#downcase arg: email } <= (Symbol or String)
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add upper bound { { [s]Email#downcase arg: email }#downcase ret: ret } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Email#downcase ret: ret }
Extracted solution for [s]Email#downcase is ((Symbol or String)) -> (Symbol or String)
About to add upper bound { [s]Email#is_valid? ret: ret } <= false
About to add upper bound { { { { [s]EmailValidator#email_regex ret: ret }#=~ ret: ret }#! ret: ret }#! ret: ret } <= false
About to add lower bound false <= { [s]Email#is_valid? ret: ret }
Extracted solution for [s]Email#is_valid? is ({ [s]Email#is_valid? arg: email }) -> false
About to add upper bound { [s]PostActionType#notify_flag_type_ids ret: ret } <= Array<Integer>
About to add upper bound { { [s]PostActionType#notify_flag_types ret: ret }#values ret: ret } <= Array<Integer>
About to add lower bound Array<Integer> <= { [s]PostActionType#notify_flag_type_ids ret: ret }
Extracted solution for [s]PostActionType#notify_flag_type_ids is () -> Array<Integer>
Extracted solution for [s]PostActionType#notify_flag_types is () -> { [s]PostActionType#notify_flag_types ret: ret }
About to add upper bound { [s]PostActionType#flag_settings ret: ret } <= FlagSettings
About to add upper bound { PostActionType# var: @flag_settings } <= FlagSettings
About to add lower bound FlagSettings <= { [s]PostActionType#flag_settings ret: ret }
Extracted solution for [s]PostActionType#flag_settings is () -> FlagSettings
About to add upper bound { User#new_user_posting_on_first_day? ret: ret } <= (false or true)
About to add upper bound { { User#first_post_created_at ret: ret }#nil? ret: ret } <= (false or true)
About to add upper bound { { User#first_post_created_at ret: ret }#>= ret: ret } <= (false or true)
About to add lower bound (false or true) <= { User#new_user_posting_on_first_day? ret: ret }
Extracted solution for User#new_user_posting_on_first_day? is () -> (false or true)
About to add upper bound { User#first_post_created_at ret: ret } <= (DateTime or Time)
About to add lower bound (DateTime or Time) <= { User#first_post_created_at ret: ret }
Extracted solution for User#first_post_created_at is () -> (DateTime or Time)
About to add upper bound { RateLimiter#initialize arg: user } <= User
About to add lower bound User <= { RateLimiter#initialize arg: user }
About to add lower bound User <= { RateLimiter# var: @user }
About to add upper bound { RateLimiter#initialize arg: type } <= 'first-day-replies-per-day'
About to add lower bound 'first-day-replies-per-day' <= { RateLimiter#initialize arg: type }
About to add lower bound 'first-day-replies-per-day' <= { RateLimiter# var: @type }
About to add lower bound 'first-day-replies-per-day' <= { RateLimiter#build_key arg: type }
About to add upper bound { RateLimiter#initialize arg: max } <= Integer
About to add lower bound Integer <= { RateLimiter#initialize arg: max }
About to add lower bound Integer <= { RateLimiter# var: @max }
About to add upper bound { RateLimiter#initialize arg: secs } <= Integer
About to add lower bound Integer <= { RateLimiter#initialize arg: secs }
About to add lower bound Integer <= { RateLimiter# var: @secs }
About to add upper bound { RateLimiter#initialize arg: global } <= false
About to add lower bound false <= { RateLimiter#initialize arg: global }
About to add lower bound false <= { RateLimiter# var: @global }
Extracted solution for RateLimiter#initialize is (User,'first-day-replies-per-day',Integer,Integer,{ global: ?false }) -> RateLimiter
About to add upper bound { UsernameValidator#initialize arg: username } <= String
About to add upper bound { [s]User#normalize_username ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add lower bound String <= { UsernameValidator#initialize arg: username }
Extracted solution for UsernameValidator#initialize is (String) -> UsernameValidator
About to add upper bound { UsernameValidator#valid_format? ret: ret } <= (false or true)
About to add upper bound { { UsernameValidator#errors ret: ret }#empty? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { UsernameValidator#valid_format? ret: ret }
Extracted solution for UsernameValidator#valid_format? is () -> (false or true)
About to add upper bound { UsernameValidator#username_length_min? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_length_min? ret: ret }
Extracted solution for UsernameValidator#username_length_min? is () -> nil
About to add upper bound { UsernameValidator#username_length_max? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_length_max? ret: ret }
Extracted solution for UsernameValidator#username_length_max? is () -> nil
About to add upper bound { UsernameValidator#username_char_valid? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_char_valid? ret: ret }
Extracted solution for UsernameValidator#username_char_valid? is () -> nil
About to add upper bound { UsernameValidator#username_char_whitelisted? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_char_whitelisted? ret: ret }
Extracted solution for UsernameValidator#username_char_whitelisted? is () -> nil
About to add upper bound { UsernameValidator#username_first_char_valid? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_first_char_valid? ret: ret }
Extracted solution for UsernameValidator#username_first_char_valid? is () -> nil
About to add upper bound { UsernameValidator#username_last_char_valid? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_last_char_valid? ret: ret }
Extracted solution for UsernameValidator#username_last_char_valid? is () -> nil
About to add upper bound { UsernameValidator#username_no_double_special? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_no_double_special? ret: ret }
Extracted solution for UsernameValidator#username_no_double_special? is () -> nil
About to add upper bound { UsernameValidator#username_does_not_end_with_confusing_suffix? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_does_not_end_with_confusing_suffix? ret: ret }
Extracted solution for UsernameValidator#username_does_not_end_with_confusing_suffix? is () -> nil
About to add upper bound { [s]User#normalize_username arg: username } <= String
About to add upper bound { [s]User#find_by_username arg: username } <= String
About to add upper bound { [s]User#username_available? arg: username } <= String
About to add upper bound { [s]I18n#t ret: ret } <= String
About to add upper bound { [s]User#reserved_username? arg: username } <= String
About to add upper bound { [s]User#normalize_username ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { [s]User#username_exists? arg: username } <= String
About to add upper bound { [s]User#normalize_username ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { [s]User#normalize_username ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add lower bound String <= { [s]User#normalize_username arg: username }
About to add upper bound { [s]User#normalize_username ret: ret } <= nil
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= nil
About to add lower bound nil <= { [s]User#normalize_username ret: ret }
About to add lower bound nil <= { [s]User#reserved_username? arg: username }
About to add lower bound nil <= { [s]User#normalize_username arg: username }
About to add lower bound nil <= { [s]User#username_exists? arg: username }
About to add lower bound nil <= { [s]User#normalize_username arg: username }
About to add lower bound nil <= { UsernameValidator#initialize arg: username }
About to add lower bound nil <= { [s]User#normalize_username arg: username }
Extracted solution for [s]User#normalize_username is (String) -> nil
About to add upper bound { [s]User#username_exists? arg: username } <= String
About to add upper bound { [s]User#normalize_username ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add lower bound String <= { [s]User#username_exists? arg: username }
About to add lower bound String <= { [s]User#normalize_username arg: username }
About to add upper bound { [s]User#username_exists? ret: ret } <= (false or true)
About to add upper bound { { MiniSqlMultisiteConnection#exec ret: ret }#> ret: ret } <= (false or true)
About to add lower bound (false or true) <= { [s]User#username_exists? ret: ret }
Extracted solution for [s]User#username_exists? is (String) -> (false or true)
About to add upper bound { User#create_reviewable ret: ret } <= nil
About to add upper bound { [s]Jobs#enqueue ret: ret } <= nil
About to add lower bound nil <= { User#create_reviewable ret: ret }
About to add lower bound nil <= { User#activate ret: ret }
Extracted solution for User#create_reviewable is () -> nil


Running solution extraction...
About to add upper bound { PostActionType# var: @flag_settings } <= FlagSettings
About to add lower bound FlagSettings <= { PostActionType# var: @flag_settings }
About to add lower bound FlagSettings <= { [s]PostActionType#flag_settings ret: ret }
Extracted solution for { PostActionType# var: @flag_settings } is FlagSettings.
About to add upper bound { RateLimiter# var: @user } <= User
About to add upper bound { RateLimiter#initialize arg: user } <= User
About to add lower bound User <= { RateLimiter# var: @user }
Extracted solution for { RateLimiter# var: @user } is User.
About to add upper bound { RateLimiter# var: @type } <= 'first-day-replies-per-day'
About to add upper bound { RateLimiter#initialize arg: type } <= 'first-day-replies-per-day'
About to add lower bound 'first-day-replies-per-day' <= { RateLimiter# var: @type }
Extracted solution for { RateLimiter# var: @type } is 'first-day-replies-per-day'.
Extracted solution for { RateLimiter# var: @key } is { RateLimiter# var: @key }.
About to add upper bound { RateLimiter# var: @max } <= Integer
About to add upper bound { RateLimiter#initialize arg: max } <= Integer
About to add lower bound Integer <= { RateLimiter# var: @max }
Extracted solution for { RateLimiter# var: @max } is Integer.
About to add upper bound { RateLimiter# var: @secs } <= Integer
About to add upper bound { RateLimiter#initialize arg: secs } <= Integer
About to add lower bound Integer <= { RateLimiter# var: @secs }
Extracted solution for { RateLimiter# var: @secs } is Integer.
About to add upper bound { RateLimiter# var: @global } <= false
About to add upper bound { RateLimiter#initialize arg: global } <= false
About to add lower bound false <= { RateLimiter# var: @global }
Extracted solution for { RateLimiter# var: @global } is false.
Extracted solution for { UsernameValidator# var: @username } is { UsernameValidator# var: @username }.
About to add upper bound { UsernameValidator# var: @errors } <= []
About to add lower bound [] <= { UsernameValidator# var: @errors }
Extracted solution for { UsernameValidator# var: @errors } is [].
HERE 1
About to add upper bound { [s]User#new_from_params arg: params } <= ({ name: String, email: String, password: { { [s]User#new_from_params arg: params }#[] ret: ret }, username: String } and [ []: (:email) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ] and [ []: (:name) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ] and [ []: (:username) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ])
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
About to add lower bound ({ name: String, email: String, password: { { [s]User#new_from_params arg: params }#[] ret: ret }, username: String } and [ []: (:email) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ] and [ []: (:name) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ] and [ []: (:username) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ]) <= { [s]User#new_from_params arg: params }
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
About to add upper bound { [s]User#new_from_params ret: ret } <= User
About to add lower bound User <= { [s]User#new_from_params ret: ret }
Extracted solution for [s]User#new_from_params is (({ name: String, email: String, password: { { [s]User#new_from_params arg: params }#[] ret: ret }, username: String } and [ []: (:email) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ] and [ []: (:name) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ] and [ []: (:username) -> { { [s]User#new_from_params arg: params }#[] ret: ret } ])) -> User
About to add upper bound { [s]User#find_by_username arg: username } <= String
About to add lower bound String <= { [s]User#find_by_username arg: username }
About to add lower bound String <= { [s]User#normalize_username arg: username }
About to add upper bound { [s]User#find_by_username ret: ret } <= User
About to add lower bound User <= { [s]User#find_by_username ret: ret }
Extracted solution for [s]User#find_by_username is (String) -> User
About to add upper bound { [s]User#username_available? arg: username } <= String
About to add lower bound String <= { [s]User#username_available? arg: username }
About to add lower bound String <= { [s]User#normalize_username arg: username }
About to add upper bound { [s]User#username_available? arg: email } <= [ present?: () -> { { [s]User#username_available? arg: email }#present? ret: ret } ]
HERE 1
HERE 1a
false AND true
About to add lower bound [ present?: () -> { { [s]User#username_available? arg: email }#present? ret: ret } ] <= { [s]User#username_available? arg: email }
HERE 1
HERE 1a
false AND true
About to add upper bound { [s]User#username_available? arg: allow_reserved_username } <= [ !: () -> { { [s]User#username_available? arg: allow_reserved_username }#! ret: ret } ]
HERE 1
HERE 1a
false AND true
About to add lower bound [ !: () -> { { [s]User#username_available? arg: allow_reserved_username }#! ret: ret } ] <= { [s]User#username_available? arg: allow_reserved_username }
HERE 1
HERE 1a
false AND true
About to add upper bound { [s]User#username_available? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { [s]User#username_available? ret: ret }
Extracted solution for [s]User#username_available? is (String,?[ present?: () -> { { [s]User#username_available? arg: email }#present? ret: ret } ],{ allow_reserved_username: ?[ !: () -> { { [s]User#username_available? arg: allow_reserved_username }#! ret: ret } ] }) -> (false or true)
About to add upper bound { User#featured_user_badges arg: limit } <= Integer
About to add lower bound Integer <= { User#featured_user_badges arg: limit }
About to add upper bound { User#featured_user_badges ret: ret } <= Array<(Topic or User or Post or UserBadge or Badge or BadgeType or GrantedBy)>
About to add lower bound Array<(Topic or User or Post or UserBadge or Badge or BadgeType or GrantedBy)> <= { User#featured_user_badges ret: ret }
Extracted solution for User#featured_user_badges is (?Integer) -> Array<(Topic or User or Post or UserBadge or Badge or BadgeType or GrantedBy)>
About to add upper bound { User#email_confirmed? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { User#email_confirmed? ret: ret }
Extracted solution for User#email_confirmed? is () -> (false or true)
About to add upper bound { User#activate ret: ret } <= nil
About to add upper bound { User#create_reviewable ret: ret } <= nil
About to add upper bound { [s]Jobs#enqueue ret: ret } <= nil
About to add upper bound { [s]Jobs#enqueue ret: ret } <= nil
About to add lower bound nil <= { User#activate ret: ret }
Extracted solution for User#activate is () -> nil
About to add upper bound { User#number_of_deleted_posts ret: ret } <= Integer
About to add lower bound Integer <= { User#number_of_deleted_posts ret: ret }
Extracted solution for User#number_of_deleted_posts is () -> Integer
About to add upper bound { User#number_of_flags_given ret: ret } <= Integer
About to add lower bound Integer <= { User#number_of_flags_given ret: ret }
Extracted solution for User#number_of_flags_given is () -> Integer
About to add upper bound { User#create_user_profile ret: ret } <= UserProfile
About to add lower bound UserProfile <= { User#create_user_profile ret: ret }
Extracted solution for User#create_user_profile is () -> UserProfile
About to add upper bound { User#create_user_option ret: ret } <= UserOption
About to add lower bound UserOption <= { User#create_user_option ret: ret }
Extracted solution for User#create_user_option is () -> UserOption
About to add upper bound { User#create_email_token ret: ret } <= EmailToken
About to add lower bound EmailToken <= { User#create_email_token ret: ret }
Extracted solution for User#create_email_token is () -> EmailToken
About to add upper bound { User#update_usernames ret: ret } <= String
About to add lower bound String <= { User#update_usernames ret: ret }
Extracted solution for User#update_usernames is () -> String
About to add upper bound { User#seen_before? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { User#seen_before? ret: ret }
Extracted solution for User#seen_before? is () -> (false or true)
About to add upper bound { [s]EmailToken#active ret: ret } <= ActiveRecord_Relation<EmailToken>
About to add lower bound ActiveRecord_Relation<EmailToken> <= { [s]EmailToken#active ret: ret }
Extracted solution for [s]EmailToken#active is () -> ActiveRecord_Relation<EmailToken>
About to add upper bound { Post#seen? arg: user } <= User
About to add lower bound User <= { Post#seen? arg: user }
About to add upper bound { Post#seen? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { Post#seen? ret: ret }
Extracted solution for Post#seen? is (User) -> (false or true)
About to add upper bound { [s]Post#find_by_detail arg: key } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Post#find_by_detail arg: key }
About to add upper bound { [s]Post#find_by_detail arg: value } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Post#find_by_detail arg: value }
About to add upper bound { [s]Post#find_by_detail ret: ret } <= Post
About to add lower bound Post <= { [s]Post#find_by_detail ret: ret }
Extracted solution for [s]Post#find_by_detail is ((Symbol or String),(Symbol or String)) -> Post
About to add upper bound { Post#is_flagged? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { Post#is_flagged? ret: ret }
Extracted solution for Post#is_flagged? is () -> (false or true)
About to add upper bound { Post#is_reply_by_email? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { Post#is_reply_by_email? ret: ret }
Extracted solution for Post#is_reply_by_email? is () -> (false or true)
About to add upper bound { Post#add_detail arg: key } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { Post#add_detail arg: key }
About to add upper bound { Post#add_detail arg: value } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { Post#add_detail arg: value }
About to add upper bound { Post#add_detail arg: extra } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { Post#add_detail arg: extra }
About to add upper bound { Post#add_detail ret: ret } <= PostDetail
About to add lower bound PostDetail <= { Post#add_detail ret: ret }
Extracted solution for Post#add_detail is ((Symbol or String),(Symbol or String),?((Symbol or String))) -> PostDetail
About to add upper bound { Post#limit_posts_per_day ret: ret } <= RateLimiter
About to add lower bound RateLimiter <= { Post#limit_posts_per_day ret: ret }
Extracted solution for Post#limit_posts_per_day is () -> RateLimiter
About to add upper bound { [s]Archetype#private_message ret: ret } <= 'private_message'
About to add lower bound 'private_message' <= { [s]Archetype#private_message ret: ret }
Extracted solution for [s]Archetype#private_message is () -> 'private_message'
About to add upper bound { Group#posts_for arg: guardian } <= Guardian
About to add lower bound Guardian <= { Group#posts_for arg: guardian }
About to add upper bound { { Group#posts_for arg: opts }#[] ret: ret } <= [ present?: () -> { { { Group#posts_for arg: opts }#[] ret: ret }#present? ret: ret } ]
HERE 1
HERE 1a
false AND true
About to add lower bound [ present?: () -> { { { Group#posts_for arg: opts }#[] ret: ret }#present? ret: ret } ] <= { { Group#posts_for arg: opts }#[] ret: ret }
HERE 1
HERE 1a
false AND true
About to add upper bound { { Group#posts_for arg: opts }#[] ret: ret } <= [ present?: () -> { { { Group#posts_for arg: opts }#[] ret: ret }#present? ret: ret } ]
HERE 1
HERE 1a
false AND true
About to add lower bound [ present?: () -> { { { Group#posts_for arg: opts }#[] ret: ret }#present? ret: ret } ] <= { { Group#posts_for arg: opts }#[] ret: ret }
HERE 1
HERE 1a
false AND true
About to add upper bound { Group#posts_for arg: opts } <= { category_id: [ present?: () -> { { { Group#posts_for arg: opts }#[] ret: ret }#present? ret: ret } ], before_post_id: { { Group#posts_for arg: opts }#[] ret: ret } }
Attempted to apply rule hash_access to var { Group#posts_for arg: opts }, but go the following error: 
Inconsistent type constraint ({  } or { Group#posts_for arg: opts }) <= { category_id: [ present?: () -> { { { Group#posts_for arg: opts }#[] ret: ret }#present? ret: ret } ], before_post_id: { { Group#posts_for arg: opts }#[] ret: ret } } generated during inference.
 /Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:304:5: note: ({  } or { Group#posts_for arg: opts }) constraint generated here.
/Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:304:     opts ||= {}
/Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:304:     ^~~~~~~~~~~
 
About to add upper bound { Group#posts_for arg: opts } <= ([ []: (:category_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ] and [ []: (:before_post_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ])
HERE 2
HERE 2a
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
About to add lower bound ([ []: (:category_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ] and [ []: (:before_post_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ]) <= { Group#posts_for arg: opts }
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
Extracted solution for Group#posts_for is (Guardian,?([ []: (:category_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ] and [ []: (:before_post_id) -> { { Group#posts_for arg: opts }#[] ret: ret } ])) -> { Group#posts_for ret: ret }
About to add upper bound { Group#messages_for arg: guardian } <= Guardian
About to add lower bound Guardian <= { Group#messages_for arg: guardian }
About to add upper bound { { Group#messages_for arg: opts }#[] ret: ret } <= [ present?: () -> { { { Group#messages_for arg: opts }#[] ret: ret }#present? ret: ret } ]
HERE 1
HERE 1a
false AND true
About to add lower bound [ present?: () -> { { { Group#messages_for arg: opts }#[] ret: ret }#present? ret: ret } ] <= { { Group#messages_for arg: opts }#[] ret: ret }
HERE 1
HERE 1a
false AND true
About to add upper bound { { Group#messages_for arg: opts }#[] ret: ret } <= [ present?: () -> { { { Group#messages_for arg: opts }#[] ret: ret }#present? ret: ret } ]
HERE 1
HERE 1a
false AND true
About to add lower bound [ present?: () -> { { { Group#messages_for arg: opts }#[] ret: ret }#present? ret: ret } ] <= { { Group#messages_for arg: opts }#[] ret: ret }
HERE 1
HERE 1a
false AND true
About to add upper bound { Group#messages_for arg: opts } <= { category_id: [ present?: () -> { { { Group#messages_for arg: opts }#[] ret: ret }#present? ret: ret } ], before_post_id: { { Group#messages_for arg: opts }#[] ret: ret } }
Attempted to apply rule hash_access to var { Group#messages_for arg: opts }, but go the following error: 
Inconsistent type constraint ({  } or { Group#messages_for arg: opts }) <= { category_id: [ present?: () -> { { { Group#messages_for arg: opts }#[] ret: ret }#present? ret: ret } ], before_post_id: { { Group#messages_for arg: opts }#[] ret: ret } } generated during inference.
 /Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:323:5: note: ({  } or { Group#messages_for arg: opts }) constraint generated here.
/Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:323:     opts ||= {}
/Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:323:     ^~~~~~~~~~~
 
About to add upper bound { Group#messages_for arg: opts } <= ([ []: (:before_post_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ] and [ []: (:category_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ])
HERE 2
HERE 2a
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
About to add lower bound ([ []: (:before_post_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ] and [ []: (:category_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ]) <= { Group#messages_for arg: opts }
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
Extracted solution for Group#messages_for is (Guardian,?([ []: (:before_post_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ] and [ []: (:category_id) -> { { Group#messages_for arg: opts }#[] ret: ret } ])) -> { Group#messages_for ret: ret }
About to add upper bound { Group#mentioned_posts_for arg: guardian } <= Guardian
About to add lower bound Guardian <= { Group#mentioned_posts_for arg: guardian }
About to add upper bound { { Group#mentioned_posts_for arg: opts }#[] ret: ret } <= [ present?: () -> { { { Group#mentioned_posts_for arg: opts }#[] ret: ret }#present? ret: ret } ]
HERE 1
HERE 1a
false AND true
About to add lower bound [ present?: () -> { { { Group#mentioned_posts_for arg: opts }#[] ret: ret }#present? ret: ret } ] <= { { Group#mentioned_posts_for arg: opts }#[] ret: ret }
HERE 1
HERE 1a
false AND true
About to add upper bound { { Group#mentioned_posts_for arg: opts }#[] ret: ret } <= [ present?: () -> { { { Group#mentioned_posts_for arg: opts }#[] ret: ret }#present? ret: ret } ]
HERE 1
HERE 1a
false AND true
About to add lower bound [ present?: () -> { { { Group#mentioned_posts_for arg: opts }#[] ret: ret }#present? ret: ret } ] <= { { Group#mentioned_posts_for arg: opts }#[] ret: ret }
HERE 1
HERE 1a
false AND true
About to add upper bound { Group#mentioned_posts_for arg: opts } <= { category_id: [ present?: () -> { { { Group#mentioned_posts_for arg: opts }#[] ret: ret }#present? ret: ret } ], before_post_id: { { Group#mentioned_posts_for arg: opts }#[] ret: ret } }
Attempted to apply rule hash_access to var { Group#mentioned_posts_for arg: opts }, but go the following error: 
Inconsistent type constraint ({  } or { Group#mentioned_posts_for arg: opts }) <= { category_id: [ present?: () -> { { { Group#mentioned_posts_for arg: opts }#[] ret: ret }#present? ret: ret } ], before_post_id: { { Group#mentioned_posts_for arg: opts }#[] ret: ret } } generated during inference.
 /Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:341:5: note: ({  } or { Group#mentioned_posts_for arg: opts }) constraint generated here.
/Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:341:     opts ||= {}
/Users/milod/Documents/works/discourse2/discourse/app/models/group.rb:341:     ^~~~~~~~~~~
 
About to add upper bound { Group#mentioned_posts_for arg: opts } <= ([ []: (:before_post_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ] and [ []: (:category_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ])
HERE 2
HERE 2a
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
About to add lower bound ([ []: (:before_post_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ] and [ []: (:category_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ]) <= { Group#mentioned_posts_for arg: opts }
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
Extracted solution for Group#mentioned_posts_for is (Guardian,?([ []: (:before_post_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ] and [ []: (:category_id) -> { { Group#mentioned_posts_for arg: opts }#[] ret: ret } ])) -> { Group#mentioned_posts_for ret: ret }
About to add upper bound { [s]Group#trust_group_ids ret: ret } <= Array<Integer>
About to add lower bound Array<Integer> <= { [s]Group#trust_group_ids ret: ret }
HERE 2
HERE 2a
HERE 2
HERE 2a
Extracted solution for [s]Group#trust_group_ids is () -> Array<Integer>
About to add upper bound { [s]Group#desired_trust_level_groups arg: trust_level } <= [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ]
About to add upper bound { [s]Group#user_trust_level_change! arg: trust_level } <= [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ]
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
About to add lower bound [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ] <= { [s]Group#desired_trust_level_groups arg: trust_level }
HERE 1
HERE 1a
false AND true
About to add upper bound { [s]Group#desired_trust_level_groups ret: ret } <= Array<Integer>
About to add upper bound { { [s]Group#trust_group_ids ret: ret }#keep_if ret: ret } <= Array<Integer>
About to add lower bound Array<Integer> <= { [s]Group#desired_trust_level_groups ret: ret }
Extracted solution for [s]Group#desired_trust_level_groups is ([ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ]) -> Array<Integer>
About to add upper bound { [s]Group#user_trust_level_change! arg: user_id } <= Integer
About to add lower bound Integer <= { [s]Group#user_trust_level_change! arg: user_id }
About to add upper bound { [s]Group#user_trust_level_change! arg: trust_level } <= [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ]
HERE 1
HERE 1a
false AND true
About to add lower bound [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ] <= { [s]Group#user_trust_level_change! arg: trust_level }
About to add lower bound [ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ] <= { [s]Group#desired_trust_level_groups arg: trust_level }
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
About to add upper bound { [s]Group#user_trust_level_change! ret: ret } <= Array<Integer>
About to add upper bound { { [s]Group#desired_trust_level_groups ret: ret }#each ret: ret } <= Array<Integer>
About to add lower bound Array<Integer> <= { [s]Group#user_trust_level_change! ret: ret }
Extracted solution for [s]Group#user_trust_level_change! is (Integer,[ +: (10) -> { { [s]Group#desired_trust_level_groups arg: trust_level }#+ ret: ret } ]) -> Array<Integer>
About to add upper bound { [s]Group#refresh_automatic_group! arg: name } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Group#refresh_automatic_group! arg: name }
About to add lower bound (Symbol or String) <= { [s]Group#lookup_group arg: name }
About to add upper bound { [s]Group#refresh_automatic_group! ret: ret } <= Group
HERE 2
HERE 2a
About to add upper bound { [s]Group#lookup_group ret: ret } <= Group
About to add lower bound Group <= { [s]Group#refresh_automatic_group! ret: ret }
Extracted solution for [s]Group#refresh_automatic_group! is ((Symbol or String)) -> Group
About to add upper bound { [s]Group#lookup_group arg: name } <= (Symbol or String)
About to add upper bound { [s]Group#refresh_automatic_group! arg: name } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Group#lookup_group arg: name }
About to add upper bound { [s]Group#lookup_group ret: ret } <= Group
About to add lower bound Group <= { [s]Group#lookup_group ret: ret }
HERE 2
HERE 2a
HERE 2
HERE 2a
HERE 2
HERE 2a
About to add lower bound Group <= { [s]Group#refresh_automatic_group! ret: ret }
Extracted solution for [s]Group#lookup_group is ((Symbol or String)) -> Group
About to add upper bound { [s]Draft#find_draft arg: user } <= User
Attempted to apply rule is_model to var { [s]Draft#find_draft arg: user }, but go the following error: 
Inconsistent type constraint (Integer and [ id: () -> { { [s]Draft#find_draft arg: user }#id ret: ret } ]) <= User generated during inference.
 
 
About to add upper bound { [s]Draft#find_draft arg: user } <= (Integer and [ id: () -> { { [s]Draft#find_draft arg: user }#id ret: ret } ])
HERE 1
HERE 1a
false AND true
About to add lower bound (Integer and [ id: () -> { { [s]Draft#find_draft arg: user }#id ret: ret } ]) <= { [s]Draft#find_draft arg: user }
HERE 1
HERE 1a
false AND true
HERE 1
HERE 1a
false AND true
About to add upper bound { [s]Draft#find_draft arg: key } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Draft#find_draft arg: key }
About to add upper bound { [s]Draft#find_draft ret: ret } <= Draft
About to add lower bound Draft <= { [s]Draft#find_draft ret: ret }
Extracted solution for [s]Draft#find_draft is ((Integer and [ id: () -> { { [s]Draft#find_draft arg: user }#id ret: ret } ]),(Symbol or String)) -> Draft
About to add upper bound { Topic#update_action_counts ret: ret } <= (false or true)
About to add lower bound (false or true) <= { Topic#update_action_counts ret: ret }
Extracted solution for Topic#update_action_counts is () -> (false or true)
About to add upper bound { Topic#has_topic_embed? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { Topic#has_topic_embed? ret: ret }
About to add lower bound (false or true) <= { Topic#expandable_first_post? ret: ret }
Extracted solution for Topic#has_topic_embed? is () -> (false or true)
About to add upper bound { Topic#expandable_first_post? ret: ret } <= (false or true)
About to add upper bound { Topic#has_topic_embed? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { Topic#expandable_first_post? ret: ret }
Extracted solution for Topic#expandable_first_post? is () -> (false or true)
About to add upper bound { [s]Notification#remove_for arg: user_id } <= Integer
About to add lower bound Integer <= { [s]Notification#remove_for arg: user_id }
About to add upper bound { [s]Notification#remove_for arg: topic_id } <= Integer
About to add lower bound Integer <= { [s]Notification#remove_for arg: topic_id }
About to add upper bound { [s]Notification#remove_for ret: ret } <= Integer
About to add lower bound Integer <= { [s]Notification#remove_for ret: ret }
Extracted solution for [s]Notification#remove_for is (Integer,Integer) -> Integer
About to add upper bound { Notification#post ret: ret } <= Post
About to add lower bound Post <= { Notification#post ret: ret }
Extracted solution for Notification#post is () -> Post
About to add upper bound { [s]Badge#trust_level_badge_ids ret: ret } <= Array<Integer>
About to add lower bound Array<Integer> <= { [s]Badge#trust_level_badge_ids ret: ret }
Extracted solution for [s]Badge#trust_level_badge_ids is () -> Array<Integer>
About to add upper bound { [s]User#reserved_username? arg: username } <= String
About to add upper bound { [s]User#normalize_username ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add lower bound String <= { [s]User#reserved_username? arg: username }
About to add lower bound String <= { [s]User#normalize_username arg: username }
About to add upper bound { [s]User#reserved_username? ret: ret } <= (false or true)
About to add upper bound { { { { [s]SiteSetting#reserved_usernames ret: ret }#unicode_normalize ret: ret }#split ret: ret }#any? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { [s]User#reserved_username? ret: ret }
Extracted solution for [s]User#reserved_username? is (String) -> (false or true)
Extracted solution for [s]EmailToken#valid_after is () -> { [s]EmailToken#valid_after ret: ret }
About to add upper bound { [s]EmailToken#confirm ret: ret } <= nil
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#reload ret: ret } <= nil
About to add upper bound { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret } <= nil
About to add lower bound nil <= { [s]EmailToken#confirm ret: ret }
Extracted solution for [s]EmailToken#confirm is ({ [s]EmailToken#confirm arg: token },{ skip_reviewable: ?{ [s]EmailToken#confirm arg: skip_reviewable } }) -> nil
About to add upper bound { [s]EmailToken#confirmable arg: token } <= (Symbol or String or Array<(Symbol or String)>)
About to add lower bound (Symbol or String or Array<(Symbol or String)>) <= { [s]EmailToken#confirmable arg: token }
About to add upper bound { [s]EmailToken#confirmable ret: ret } <= EmailToken
About to add lower bound EmailToken <= { [s]EmailToken#confirmable ret: ret }
Extracted solution for [s]EmailToken#confirmable is ((Symbol or String or Array<(Symbol or String)>)) -> EmailToken
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Invite#redeem_from_email arg: email }
About to add lower bound (Symbol or String) <= { [s]Email#downcase arg: email }
About to add lower bound (Symbol or String) <= { [s]Email#is_valid? arg: email }
About to add lower bound (Symbol or String) <= { [s]Email#downcase ret: ret }
About to add lower bound (Symbol or String) <= { [s]Email#is_valid? arg: email }
About to add lower bound (Symbol or String) <= { [s]Email#downcase ret: ret }
About to add upper bound { [s]Invite#redeem_from_email ret: ret } <= Invite
About to add lower bound Invite <= { [s]Invite#redeem_from_email ret: ret }
Extracted solution for [s]Invite#redeem_from_email is ((Symbol or String)) -> Invite
About to add upper bound { [s]Email#downcase arg: email } <= (Symbol or String)
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Email#downcase arg: email }
About to add lower bound (Symbol or String) <= { [s]Email#is_valid? arg: email }
About to add lower bound (Symbol or String) <= { [s]Email#downcase ret: ret }
About to add upper bound { [s]Email#downcase ret: ret } <= (Symbol or String)
About to add upper bound { [s]Email#downcase arg: email } <= (Symbol or String)
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add upper bound { { [s]Email#downcase arg: email }#downcase ret: ret } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add upper bound { [s]Invite#redeem_from_email arg: email } <= (Symbol or String)
About to add upper bound { { { [s]EmailToken#atomic_confirm ret: ret }#[] ret: ret }#email ret: ret } <= (Symbol or String)
About to add lower bound (Symbol or String) <= { [s]Email#downcase ret: ret }
Extracted solution for [s]Email#downcase is ((Symbol or String)) -> (Symbol or String)
About to add upper bound { [s]Email#is_valid? ret: ret } <= false
About to add upper bound { { { { [s]EmailValidator#email_regex ret: ret }#=~ ret: ret }#! ret: ret }#! ret: ret } <= false
About to add lower bound false <= { [s]Email#is_valid? ret: ret }
Extracted solution for [s]Email#is_valid? is ({ [s]Email#is_valid? arg: email }) -> false
About to add upper bound { [s]PostActionType#notify_flag_type_ids ret: ret } <= Array<Integer>
About to add upper bound { { [s]PostActionType#notify_flag_types ret: ret }#values ret: ret } <= Array<Integer>
About to add lower bound Array<Integer> <= { [s]PostActionType#notify_flag_type_ids ret: ret }
Extracted solution for [s]PostActionType#notify_flag_type_ids is () -> Array<Integer>
Extracted solution for [s]PostActionType#notify_flag_types is () -> { [s]PostActionType#notify_flag_types ret: ret }
About to add upper bound { [s]PostActionType#flag_settings ret: ret } <= FlagSettings
About to add upper bound { PostActionType# var: @flag_settings } <= FlagSettings
About to add lower bound FlagSettings <= { [s]PostActionType#flag_settings ret: ret }
Extracted solution for [s]PostActionType#flag_settings is () -> FlagSettings
About to add upper bound { User#new_user_posting_on_first_day? ret: ret } <= (false or true)
About to add upper bound { { User#first_post_created_at ret: ret }#nil? ret: ret } <= (false or true)
About to add upper bound { { User#first_post_created_at ret: ret }#>= ret: ret } <= (false or true)
About to add lower bound (false or true) <= { User#new_user_posting_on_first_day? ret: ret }
Extracted solution for User#new_user_posting_on_first_day? is () -> (false or true)
About to add upper bound { User#first_post_created_at ret: ret } <= (DateTime or Time)
About to add lower bound (DateTime or Time) <= { User#first_post_created_at ret: ret }
Extracted solution for User#first_post_created_at is () -> (DateTime or Time)
About to add upper bound { RateLimiter#initialize arg: user } <= User
About to add lower bound User <= { RateLimiter#initialize arg: user }
About to add lower bound User <= { RateLimiter# var: @user }
About to add upper bound { RateLimiter#initialize arg: type } <= 'first-day-replies-per-day'
About to add lower bound 'first-day-replies-per-day' <= { RateLimiter#initialize arg: type }
About to add lower bound 'first-day-replies-per-day' <= { RateLimiter# var: @type }
About to add lower bound 'first-day-replies-per-day' <= { RateLimiter#build_key arg: type }
About to add upper bound { RateLimiter#initialize arg: max } <= Integer
About to add lower bound Integer <= { RateLimiter#initialize arg: max }
About to add lower bound Integer <= { RateLimiter# var: @max }
About to add upper bound { RateLimiter#initialize arg: secs } <= Integer
About to add lower bound Integer <= { RateLimiter#initialize arg: secs }
About to add lower bound Integer <= { RateLimiter# var: @secs }
About to add upper bound { RateLimiter#initialize arg: global } <= false
About to add lower bound false <= { RateLimiter#initialize arg: global }
About to add lower bound false <= { RateLimiter# var: @global }
Extracted solution for RateLimiter#initialize is (User,'first-day-replies-per-day',Integer,Integer,{ global: ?false }) -> RateLimiter
About to add upper bound { UsernameValidator#initialize arg: username } <= String
About to add upper bound { [s]User#normalize_username ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add lower bound String <= { UsernameValidator#initialize arg: username }
Extracted solution for UsernameValidator#initialize is (String) -> UsernameValidator
About to add upper bound { UsernameValidator#valid_format? ret: ret } <= (false or true)
About to add upper bound { { UsernameValidator#errors ret: ret }#empty? ret: ret } <= (false or true)
About to add lower bound (false or true) <= { UsernameValidator#valid_format? ret: ret }
Extracted solution for UsernameValidator#valid_format? is () -> (false or true)
About to add upper bound { UsernameValidator#username_length_min? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_length_min? ret: ret }
Extracted solution for UsernameValidator#username_length_min? is () -> nil
About to add upper bound { UsernameValidator#username_length_max? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_length_max? ret: ret }
Extracted solution for UsernameValidator#username_length_max? is () -> nil
About to add upper bound { UsernameValidator#username_char_valid? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_char_valid? ret: ret }
Extracted solution for UsernameValidator#username_char_valid? is () -> nil
About to add upper bound { UsernameValidator#username_char_whitelisted? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_char_whitelisted? ret: ret }
Extracted solution for UsernameValidator#username_char_whitelisted? is () -> nil
About to add upper bound { UsernameValidator#username_first_char_valid? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_first_char_valid? ret: ret }
Extracted solution for UsernameValidator#username_first_char_valid? is () -> nil
About to add upper bound { UsernameValidator#username_last_char_valid? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_last_char_valid? ret: ret }
Extracted solution for UsernameValidator#username_last_char_valid? is () -> nil
About to add upper bound { UsernameValidator#username_no_double_special? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_no_double_special? ret: ret }
Extracted solution for UsernameValidator#username_no_double_special? is () -> nil
About to add upper bound { UsernameValidator#username_does_not_end_with_confusing_suffix? ret: ret } <= nil
About to add upper bound { { UsernameValidator#errors ret: ret }#<< ret: ret } <= nil
About to add lower bound nil <= { UsernameValidator#username_does_not_end_with_confusing_suffix? ret: ret }
Extracted solution for UsernameValidator#username_does_not_end_with_confusing_suffix? is () -> nil
About to add upper bound { [s]User#normalize_username arg: username } <= String
About to add upper bound { [s]User#find_by_username arg: username } <= String
About to add upper bound { [s]User#username_available? arg: username } <= String
About to add upper bound { [s]I18n#t ret: ret } <= String
About to add upper bound { [s]User#reserved_username? arg: username } <= String
About to add upper bound { [s]User#normalize_username ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { [s]User#username_exists? arg: username } <= String
About to add upper bound { [s]User#normalize_username ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { [s]User#normalize_username ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add lower bound String <= { [s]User#normalize_username arg: username }
About to add upper bound { [s]User#normalize_username ret: ret } <= nil
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= nil
About to add lower bound nil <= { [s]User#normalize_username ret: ret }
About to add lower bound nil <= { [s]User#reserved_username? arg: username }
About to add lower bound nil <= { [s]User#normalize_username arg: username }
About to add lower bound nil <= { [s]User#username_exists? arg: username }
About to add lower bound nil <= { [s]User#normalize_username arg: username }
About to add lower bound nil <= { UsernameValidator#initialize arg: username }
About to add lower bound nil <= { [s]User#normalize_username arg: username }
Extracted solution for [s]User#normalize_username is (String) -> nil
About to add upper bound { [s]User#username_exists? arg: username } <= String
About to add upper bound { [s]User#normalize_username ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add upper bound { { { [s]User#normalize_username arg: username }#unicode_normalize ret: ret }#downcase ret: ret } <= String
About to add lower bound String <= { [s]User#username_exists? arg: username }
About to add lower bound String <= { [s]User#normalize_username arg: username }
About to add upper bound { [s]User#username_exists? ret: ret } <= (false or true)
About to add upper bound { { MiniSqlMultisiteConnection#exec ret: ret }#> ret: ret } <= (false or true)
About to add lower bound (false or true) <= { [s]User#username_exists? ret: ret }
Extracted solution for [s]User#username_exists? is (String) -> (false or true)
About to add upper bound { User#create_reviewable ret: ret } <= nil
About to add upper bound { [s]Jobs#enqueue ret: ret } <= nil
About to add lower bound nil <= { User#create_reviewable ret: ret }
About to add lower bound nil <= { User#activate ret: ret }
Extracted solution for User#create_reviewable is () -> nil
